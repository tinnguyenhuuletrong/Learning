{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let wTTinAssetId = base58'9561GNM35uuW6eGsUTFGDZbbPTNajnKa5vkhKCEhDioH'

@Callable(i)
func deposit() = {
  let pmt = extract(i.payment)
  if(pmt.assetId != wTTinAssetId) then throw("wTTin only token available at moment")
  else {
    let currentKey = toBase58String(i.caller.bytes)
    let currentAmount = match getInteger(this, currentKey) {
      case a:Int => a
      case _ => 0
    }
    let newAmount = currentAmount + pmt.amount
    WriteSet([
      DataEntry(currentKey, newAmount)
    ]) 
  }
}

@Callable(i)
func withdraw(amount: Int) = {
  let currentKey = toBase58String(i.caller.bytes)
  let currentAmount = match getInteger(this, currentKey) {
    case a:Int => a
    case _ => 0
  }
  let newAmount = currentAmount - amount
  if(amount <= 0) then throw("can not withdraw negative or zero amount")
  else if(newAmount <= 0 ) then throw("not enough balance")
  else {
    ScriptResult(
      WriteSet([DataEntry(currentKey, newAmount)]),
      TransferSet([ScriptTransfer(i.caller, amount, wTTinAssetId)])
    )
  }
}