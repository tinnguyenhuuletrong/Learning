// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Math expression 1 + (3 * 5)**2 1`] = `
MathExpVisitor {
  "ctx": RuntimeContext {
    "_logs": Array [
      "got num: 1",
      "got num: 3",
      "got num: 5",
      "exec * for v1:3, v2:5 -> 15",
      "got num: 2",
      "exec ** for v1:15, v2:2 -> 225",
      "exec + for v1:1, v2:225 -> 226",
    ],
    "mem": Object {},
    "stack": Array [],
  },
}
`;

exports[`Math expression res = 1 + (3 * 5)**2 1`] = `
MathExpVisitor {
  "ctx": RuntimeContext {
    "_logs": Array [
      "got num: 1",
      "got num: 3",
      "got num: 5",
      "exec * for v1:3, v2:5 -> 15",
      "got num: 2",
      "exec / for v1:15, v2:2 -> 7.5",
      "exec + for v1:1, v2:7.5 -> 8.5",
      "assign res = 8.5",
    ],
    "mem": Object {
      "res": 8.5,
    },
    "stack": Array [],
  },
}
`;

exports[`Math expression res = inp < 2 || inp > 5 1`] = `
MathExpVisitor {
  "ctx": RuntimeContext {
    "_logs": Array [
      "got num: 2",
      "exec < for v1:-1, v2:2 -> true",
      "got num: 5",
      "exec > for v1:-1, v2:5 -> false",
      "exec || for v1:true, v2:false -> true",
      "assign res = true",
    ],
    "mem": Object {
      "inp": -1,
      "res": true,
    },
    "stack": Array [],
  },
}
`;

exports[`Math expression res = inp <= 2 1`] = `
MathExpVisitor {
  "ctx": RuntimeContext {
    "_logs": Array [
      "got num: 2",
      "exec <= for v1:2, v2:2 -> true",
      "assign res = true",
    ],
    "mem": Object {
      "inp": 2,
      "res": true,
    },
    "stack": Array [],
  },
}
`;

exports[`Math expression res = inp > 2 && inp <= 5 1`] = `
MathExpVisitor {
  "ctx": RuntimeContext {
    "_logs": Array [
      "got num: 2",
      "exec > for v1:10, v2:2 -> true",
      "got num: 5",
      "exec <= for v1:10, v2:5 -> false",
      "exec && for v1:true, v2:false -> false",
      "assign res = false",
    ],
    "mem": Object {
      "inp": 10,
      "res": false,
    },
    "stack": Array [],
  },
}
`;

exports[`Math expression res = inp > 2 1`] = `
MathExpVisitor {
  "ctx": RuntimeContext {
    "_logs": Array [
      "got num: 2",
      "exec > for v1:3, v2:2 -> true",
      "assign res = true",
    ],
    "mem": Object {
      "inp": 3,
      "res": true,
    },
    "stack": Array [],
  },
}
`;
