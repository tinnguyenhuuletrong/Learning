// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TLite array res = [1,2,inp > 18,'name'] 1`] = `
TLiteExpVisitor {
  "ctx": RuntimeContext {
    "_logs": Array [
      "got num: 1",
      "got num: 2",
      "got num: 18",
      "exec > for v1:22, v2:18 -> true",
      "got str: name",
      "got array: [1,2,true,\\"name\\"]",
      "assign res = [1,2,true,\\"name\\"]",
    ],
    "_opts": Object {
      "debugTrace": true,
    },
    "funcDb": Object {},
    "mem": Object {
      "inp": "22",
      "res": Array [
        1,
        2,
        true,
        "name",
      ],
    },
    "stack": Array [],
  },
}
`;

exports[`TLite arrow function call f = i => { return i + 1}; res = f(1) * f(5) 1`] = `
TLiteExpVisitor {
  "ctx": RuntimeContext {
    "_logs": Array [
      "got arrow function",
      "assign f = undefined",
      "got num: 1",
      "push stack {\\"i\\":1}",
      "got num: 1",
      "exec + for v1:1, v2:1 -> 2",
      "got block return: 2",
      "pop stack",
      "exec function call f() : args [1] -> res 2",
      "got num: 5",
      "push stack {\\"i\\":5}",
      "got num: 1",
      "exec + for v1:5, v2:1 -> 6",
      "got block return: 6",
      "pop stack",
      "exec function call f() : args [5] -> res 6",
      "exec * for v1:2, v2:6 -> 12",
      "assign res = 12",
    ],
    "_opts": Object {
      "debugTrace": true,
    },
    "funcDb": Object {},
    "mem": Object {
      "f": [Function],
      "res": 12,
    },
    "stack": Array [],
  },
}
`;

exports[`TLite arrow function call f = i => i + 1; res = f(1) * f(5) 1`] = `
TLiteExpVisitor {
  "ctx": RuntimeContext {
    "_logs": Array [
      "got arrow function",
      "assign f = undefined",
      "got num: 1",
      "push stack {\\"i\\":1}",
      "got num: 1",
      "exec + for v1:1, v2:1 -> 2",
      "pop stack",
      "exec function call f() : args [1] -> res 2",
      "got num: 5",
      "push stack {\\"i\\":5}",
      "got num: 1",
      "exec + for v1:5, v2:1 -> 6",
      "pop stack",
      "exec function call f() : args [5] -> res 6",
      "exec * for v1:2, v2:6 -> 12",
      "assign res = 12",
    ],
    "_opts": Object {
      "debugTrace": true,
    },
    "funcDb": Object {},
    "mem": Object {
      "f": [Function],
      "res": 12,
    },
    "stack": Array [],
  },
}
`;

exports[`TLite arrow function call res = map([1,2,3], itm => itm ** 2) 1`] = `
TLiteExpVisitor {
  "ctx": RuntimeContext {
    "_logs": Array [
      "got num: 1",
      "got num: 2",
      "got num: 3",
      "got array: [1,2,3]",
      "got arrow function",
      "push stack {\\"itm\\":1}",
      "got num: 2",
      "exec ** for v1:1, v2:2 -> 1",
      "pop stack",
      "push stack {\\"itm\\":2}",
      "got num: 2",
      "exec ** for v1:2, v2:2 -> 4",
      "pop stack",
      "push stack {\\"itm\\":3}",
      "got num: 2",
      "exec ** for v1:3, v2:2 -> 9",
      "pop stack",
      "exec function call map() : args [[1,2,3],null] -> res 1,4,9",
      "assign res = [1,4,9]",
    ],
    "_opts": Object {
      "debugTrace": true,
    },
    "funcDb": Object {
      "map": [Function],
    },
    "mem": Object {
      "res": Array [
        1,
        4,
        9,
      ],
    },
    "stack": Array [],
  },
}
`;

exports[`TLite condition if (3%2 == 0) isEven = true else isEven = false 1`] = `
TLiteExpVisitor {
  "ctx": RuntimeContext {
    "_logs": Array [
      "exec if_branch test",
      "got num: 3",
      "got num: 2",
      "exec % for v1:3, v2:2 -> 1",
      "got num: 0",
      "exec == for v1:1, v2:0 -> false",
      "got bool: false",
      "assign isEven = false",
      "exec if_branch: false",
    ],
    "_opts": Object {
      "debugTrace": true,
    },
    "funcDb": Object {},
    "mem": Object {
      "isEven": false,
    },
    "stack": Array [],
  },
}
`;

exports[`TLite condition if (inp%2 == 0) isEven = true else isEven = false 1`] = `
TLiteExpVisitor {
  "ctx": RuntimeContext {
    "_logs": Array [
      "exec if_branch test",
      "got num: 2",
      "exec % for v1:22, v2:2 -> 0",
      "got num: 0",
      "exec == for v1:0, v2:0 -> true",
      "got bool: true",
      "assign isEven = true",
      "exec if_branch: true",
    ],
    "_opts": Object {
      "debugTrace": true,
    },
    "funcDb": Object {},
    "mem": Object {
      "inp": "22",
      "isEven": true,
    },
    "stack": Array [],
  },
}
`;

exports[`TLite condition res = 2 > 18 ? 'mature' : 'teen' 1`] = `
TLiteExpVisitor {
  "ctx": RuntimeContext {
    "_logs": Array [
      "exec if_branch_expression test",
      "got num: 2",
      "got num: 18",
      "exec > for v1:2, v2:18 -> false",
      "got str: teen",
      "exec if_branch_expression: false -> teen",
      "assign res = \\"teen\\"",
    ],
    "_opts": Object {
      "debugTrace": true,
    },
    "funcDb": Object {},
    "mem": Object {
      "res": "teen",
    },
    "stack": Array [],
  },
}
`;

exports[`TLite condition res = inp > 18 ? 'mature' : 'teen' 1`] = `
TLiteExpVisitor {
  "ctx": RuntimeContext {
    "_logs": Array [
      "exec if_branch_expression test",
      "got num: 18",
      "exec > for v1:22, v2:18 -> true",
      "got str: mature",
      "exec if_branch_expression: true -> mature",
      "assign res = \\"mature\\"",
    ],
    "_opts": Object {
      "debugTrace": true,
    },
    "funcDb": Object {},
    "mem": Object {
      "inp": "22",
      "res": "mature",
    },
    "stack": Array [],
  },
}
`;

exports[`TLite expression 1 + (3 * 5)**2 1`] = `
TLiteExpVisitor {
  "ctx": RuntimeContext {
    "_logs": Array [
      "got num: 1",
      "got num: 3",
      "got num: 5",
      "exec * for v1:3, v2:5 -> 15",
      "got num: 2",
      "exec ** for v1:15, v2:2 -> 225",
      "exec + for v1:1, v2:225 -> 226",
    ],
    "_opts": Object {
      "debugTrace": true,
    },
    "funcDb": Object {},
    "mem": Object {},
    "stack": Array [],
  },
}
`;

exports[`TLite expression res = !(+inp < 2 || +inp > 5) 1`] = `
TLiteExpVisitor {
  "ctx": RuntimeContext {
    "_logs": Array [
      "exec + for v:-1 -> -1",
      "got num: 2",
      "exec < for v1:-1, v2:2 -> true",
      "exec + for v:-1 -> -1",
      "got num: 5",
      "exec > for v1:-1, v2:5 -> false",
      "exec || for v1:true, v2:false -> true",
      "exec ! for v:true -> false",
      "assign res = false",
    ],
    "_opts": Object {
      "debugTrace": true,
    },
    "funcDb": Object {},
    "mem": Object {
      "inp": "-1",
      "res": false,
    },
    "stack": Array [],
  },
}
`;

exports[`TLite expression res = 'hello' 1`] = `
TLiteExpVisitor {
  "ctx": RuntimeContext {
    "_logs": Array [
      "got str: hello",
      "assign res = \\"hello\\"",
      "got str: hi",
      "assign res = \\"hi\\"",
    ],
    "_opts": Object {
      "debugTrace": true,
    },
    "funcDb": Object {},
    "mem": Object {
      "res": "hi",
    },
    "stack": Array [],
  },
}
`;

exports[`TLite expression res = 1 + (3 * 5)**2 1`] = `
TLiteExpVisitor {
  "ctx": RuntimeContext {
    "_logs": Array [
      "got num: 1",
      "got num: 3",
      "got num: 5",
      "exec * for v1:3, v2:5 -> 15",
      "got num: 2",
      "exec / for v1:15, v2:2 -> 7.5",
      "exec + for v1:1, v2:7.5 -> 8.5",
      "assign res = 8.5",
    ],
    "_opts": Object {
      "debugTrace": true,
    },
    "funcDb": Object {},
    "mem": Object {
      "res": 8.5,
    },
    "stack": Array [],
  },
}
`;

exports[`TLite expression res = inp < 2 || inp > 5 1`] = `
TLiteExpVisitor {
  "ctx": RuntimeContext {
    "_logs": Array [
      "got num: 2",
      "exec < for v1:-1, v2:2 -> true",
      "got num: 5",
      "exec > for v1:-1, v2:5 -> false",
      "exec || for v1:true, v2:false -> true",
      "assign res = true",
    ],
    "_opts": Object {
      "debugTrace": true,
    },
    "funcDb": Object {},
    "mem": Object {
      "inp": -1,
      "res": true,
    },
    "stack": Array [],
  },
}
`;

exports[`TLite expression res = inp <= 2 1`] = `
TLiteExpVisitor {
  "ctx": RuntimeContext {
    "_logs": Array [
      "got num: 2",
      "exec <= for v1:2, v2:2 -> true",
      "assign res = true",
    ],
    "_opts": Object {
      "debugTrace": true,
    },
    "funcDb": Object {},
    "mem": Object {
      "inp": 2,
      "res": true,
    },
    "stack": Array [],
  },
}
`;

exports[`TLite expression res = inp > 2 && inp <= 5 1`] = `
TLiteExpVisitor {
  "ctx": RuntimeContext {
    "_logs": Array [
      "got num: 2",
      "exec > for v1:10, v2:2 -> true",
      "got num: 5",
      "exec <= for v1:10, v2:5 -> false",
      "exec && for v1:true, v2:false -> false",
      "assign res = false",
    ],
    "_opts": Object {
      "debugTrace": true,
    },
    "funcDb": Object {},
    "mem": Object {
      "inp": 10,
      "res": false,
    },
    "stack": Array [],
  },
}
`;

exports[`TLite expression res = inp > 2 1`] = `
TLiteExpVisitor {
  "ctx": RuntimeContext {
    "_logs": Array [
      "got num: 2",
      "exec > for v1:3, v2:2 -> true",
      "assign res = true",
    ],
    "_opts": Object {
      "debugTrace": true,
    },
    "funcDb": Object {},
    "mem": Object {
      "inp": 3,
      "res": true,
    },
    "stack": Array [],
  },
}
`;

exports[`TLite expression res = inp*=2 1`] = `
TLiteExpVisitor {
  "ctx": RuntimeContext {
    "_logs": Array [
      "got num: 2",
      "assign inp *= 2",
      "assign res = -2",
    ],
    "_opts": Object {
      "debugTrace": true,
    },
    "funcDb": Object {},
    "mem": Object {
      "inp": -2,
      "res": -2,
    },
    "stack": Array [],
  },
}
`;

exports[`TLite expression res = inp+=2 1`] = `
TLiteExpVisitor {
  "ctx": RuntimeContext {
    "_logs": Array [
      "got num: 2",
      "assign inp += 2",
      "assign res = 4",
    ],
    "_opts": Object {
      "debugTrace": true,
    },
    "funcDb": Object {},
    "mem": Object {
      "inp": 4,
      "res": 4,
    },
    "stack": Array [],
  },
}
`;

exports[`TLite expression res = inp/=2 1`] = `
TLiteExpVisitor {
  "ctx": RuntimeContext {
    "_logs": Array [
      "got num: 2",
      "assign inp /= 2",
      "assign res = 1",
    ],
    "_opts": Object {
      "debugTrace": true,
    },
    "funcDb": Object {},
    "mem": Object {
      "inp": 1,
      "res": 1,
    },
    "stack": Array [],
  },
}
`;

exports[`TLite expression res = inp-=2 1`] = `
TLiteExpVisitor {
  "ctx": RuntimeContext {
    "_logs": Array [
      "got num: 2",
      "assign inp -= 2",
      "assign res = 0",
    ],
    "_opts": Object {
      "debugTrace": true,
    },
    "funcDb": Object {},
    "mem": Object {
      "inp": 0,
      "res": 0,
    },
    "stack": Array [],
  },
}
`;

exports[`TLite function call res = res = filter([1, 2, 3, inp], isOdd) 1`] = `
TLiteExpVisitor {
  "ctx": RuntimeContext {
    "_logs": Array [
      "got num: 1",
      "got num: 2",
      "got num: 3",
      "got array: [1,2,3,21]",
      "exec function call filter() : args [[1,2,3,21],null] -> res 1,3,21",
      "assign res = [1,3,21]",
    ],
    "_opts": Object {
      "debugTrace": true,
    },
    "funcDb": Object {
      "filter": [Function],
      "isOdd": [Function],
    },
    "mem": Object {
      "inp": 21,
      "res": Array [
        1,
        3,
        21,
      ],
    },
    "stack": Array [],
  },
}
`;

exports[`TLite function call res = toUpper(toString(inp) + '_a') 1`] = `
TLiteExpVisitor {
  "ctx": RuntimeContext {
    "_logs": Array [
      "exec function call toString() : args [22] -> res 22",
      "got str: _a",
      "exec + for v1:22, v2:_a -> 22_a",
      "exec function call toUpper() : args [\\"22_a\\"] -> res 22_A",
      "assign res = \\"22_A\\"",
    ],
    "_opts": Object {
      "debugTrace": true,
    },
    "funcDb": Object {
      "toString": [Function],
      "toUpper": [Function],
    },
    "mem": Object {
      "inp": 22,
      "res": "22_A",
    },
    "stack": Array [],
  },
}
`;

exports[`TLite nestest mixed object mixed obj type and dynamic props 1 1`] = `
TLiteExpVisitor {
  "ctx": RuntimeContext {
    "_logs": Array [
      "got str: mr.A",
      "got kv pair: [name,mr.A]",
      "got kv pair: [age,22]",
      "got object: {\\"name\\":\\"mr.A\\",\\"age\\":22}",
      "assign res = {\\"name\\":\\"mr.A\\",\\"age\\":22}",
      "got num: 18",
      "exec > for v1:22, v2:18 -> true",
      "assign res.isMature = true",
      "got str: 123 street A",
      "assign res.house.address = \\"123 street A\\"",
      "got str: table",
      "got str: tv",
      "got str: air-conditioner",
      "got array: [\\"table\\",\\"tv\\",\\"air-conditioner\\"]",
      "assign res.house.items = [\\"table\\",\\"tv\\",\\"air-conditioner\\"]",
    ],
    "_opts": Object {
      "debugTrace": true,
    },
    "funcDb": Object {},
    "mem": Object {
      "inp": 22,
      "res": Object {
        "age": 22,
        "house": Object {
          "address": "123 street A",
          "items": Array [
            "table",
            "tv",
            "air-conditioner",
          ],
        },
        "isMature": true,
        "name": "mr.A",
      },
    },
    "stack": Array [],
  },
}
`;
