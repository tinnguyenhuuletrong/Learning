// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TLite aot compiler: array, object res = [1,2,{c:true}] 1`] = `
TLiteAotCompileVisitor {
  "ctx": CompilerContext {
    "ops": Array [
      Op {
        "op": "MSAVE",
        "params": Object {
          "nextVal": Op {
            "op": "SVAL",
            "params": Object {
              "type": "array",
              "v": Array [
                Op {
                  "op": "SVAL",
                  "params": Object {
                    "type": "number",
                    "v": 1,
                  },
                },
                Op {
                  "op": "SVAL",
                  "params": Object {
                    "type": "number",
                    "v": 2,
                  },
                },
                Op {
                  "op": "SVAL",
                  "params": Object {
                    "type": "object",
                    "v": Array [
                      Object {
                        "key": "c",
                        "val": Op {
                          "op": "SVAL",
                          "params": Object {
                            "type": "bool",
                            "v": true,
                          },
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          "path": "res",
          "perform": "=",
        },
      },
    ],
  },
}
`;

exports[`TLite aot compiler: array, object res = [1,2,{c:true}] 2`] = `
Array [
  "resolve value type number - 1",
  "resolve value type number - 2",
  "resolve value type bool - true",
  "resolve value type object - [object Object]",
  "resolve value type array - 1,2,[object Object]",
  "do res = 1,2,[object Object]",
]
`;

exports[`TLite aot compiler: array, object res = [1,2,inp > 18,'name'] 1`] = `
TLiteAotCompileVisitor {
  "ctx": CompilerContext {
    "ops": Array [
      Op {
        "op": "MSAVE",
        "params": Object {
          "nextVal": Op {
            "op": "SVAL",
            "params": Object {
              "type": "array",
              "v": Array [
                Op {
                  "op": "SVAL",
                  "params": Object {
                    "type": "number",
                    "v": 1,
                  },
                },
                Op {
                  "op": "SVAL",
                  "params": Object {
                    "type": "number",
                    "v": 2,
                  },
                },
                Op {
                  "op": "BEXP",
                  "params": Object {
                    "op": ">",
                    "v1": Op {
                      "op": "SVAL",
                      "params": Object {
                        "type": "variable",
                        "v": "inp",
                      },
                    },
                    "v2": Op {
                      "op": "SVAL",
                      "params": Object {
                        "type": "number",
                        "v": 18,
                      },
                    },
                  },
                },
                Op {
                  "op": "SVAL",
                  "params": Object {
                    "type": "string",
                    "v": "name",
                  },
                },
              ],
            },
          },
          "path": "res",
          "perform": "=",
        },
      },
    ],
  },
}
`;

exports[`TLite aot compiler: array, object res = [1,2,inp > 18,'name'] 2`] = `
Array [
  "resolve value type number - 1",
  "resolve value type number - 2",
  "resolve value type variable:inp - 30",
  "resolve value type number - 18",
  "resolve BEXP > v1:30 v2:18 - true",
  "resolve value type string - name",
  "resolve value type array - 1,2,true,name",
  "do res = 1,2,true,name",
]
`;

exports[`TLite aot compiler: array, object res = {}; res.a=1; res.b='hi'; res.c.c1.c2 = true, res.d = res.a /2; res.f=inp; res.e=[-1, res.d, res.c.c1.c2, res.f]; 1`] = `
TLiteAotCompileVisitor {
  "ctx": CompilerContext {
    "ops": Array [
      Op {
        "op": "MSAVE",
        "params": Object {
          "nextVal": Op {
            "op": "SVAL",
            "params": Object {
              "type": "object",
              "v": Array [],
            },
          },
          "path": "res",
          "perform": "=",
        },
      },
      Op {
        "op": "MSAVE",
        "params": Object {
          "nextVal": Op {
            "op": "SVAL",
            "params": Object {
              "type": "number",
              "v": 1,
            },
          },
          "path": "res.a",
          "perform": "=",
        },
      },
      Op {
        "op": "MSAVE",
        "params": Object {
          "nextVal": Op {
            "op": "SVAL",
            "params": Object {
              "type": "string",
              "v": "hi",
            },
          },
          "path": "res.b",
          "perform": "=",
        },
      },
      Op {
        "op": "MSAVE",
        "params": Object {
          "nextVal": Op {
            "op": "SVAL",
            "params": Object {
              "type": "bool",
              "v": true,
            },
          },
          "path": "res.c.c1.c2",
          "perform": "=",
        },
      },
      Op {
        "op": "MSAVE",
        "params": Object {
          "nextVal": Op {
            "op": "BEXP",
            "params": Object {
              "op": "/",
              "v1": Op {
                "op": "SVAL",
                "params": Object {
                  "type": "variable",
                  "v": "res.a",
                },
              },
              "v2": Op {
                "op": "SVAL",
                "params": Object {
                  "type": "number",
                  "v": 2,
                },
              },
            },
          },
          "path": "res.d",
          "perform": "=",
        },
      },
      Op {
        "op": "MSAVE",
        "params": Object {
          "nextVal": Op {
            "op": "SVAL",
            "params": Object {
              "type": "variable",
              "v": "inp",
            },
          },
          "path": "res.f",
          "perform": "=",
        },
      },
      Op {
        "op": "MSAVE",
        "params": Object {
          "nextVal": Op {
            "op": "SVAL",
            "params": Object {
              "type": "array",
              "v": Array [
                Op {
                  "op": "UEXP",
                  "params": Object {
                    "arg": Op {
                      "op": "SVAL",
                      "params": Object {
                        "type": "number",
                        "v": 1,
                      },
                    },
                    "op": "-",
                  },
                },
                Op {
                  "op": "SVAL",
                  "params": Object {
                    "type": "variable",
                    "v": "res.d",
                  },
                },
                Op {
                  "op": "SVAL",
                  "params": Object {
                    "type": "variable",
                    "v": "res.c.c1.c2",
                  },
                },
                Op {
                  "op": "SVAL",
                  "params": Object {
                    "type": "variable",
                    "v": "res.f",
                  },
                },
              ],
            },
          },
          "path": "res.e",
          "perform": "=",
        },
      },
    ],
  },
}
`;

exports[`TLite aot compiler: array, object res = {}; res.a=1; res.b='hi'; res.c.c1.c2 = true, res.d = res.a /2; res.f=inp; res.e=[-1, res.d, res.c.c1.c2, res.f]; 2`] = `
Array [
  "resolve value type object - [object Object]",
  "do res = [object Object]",
  "resolve value type number - 1",
  "do res.a = 1",
  "resolve value type string - hi",
  "do res.b = hi",
  "resolve value type bool - true",
  "do res.c.c1.c2 = true",
  "resolve value type variable:res.a - 1",
  "resolve value type number - 2",
  "resolve BEXP / v1:1 v2:2 - 0.5",
  "do res.d = 0.5",
  "resolve value type variable:inp - 999",
  "do res.f = 999",
  "resolve value type number - 1",
  "resolve BEXP - v:1 - -1",
  "resolve value type variable:res.d - 0.5",
  "resolve value type variable:res.c.c1.c2 - true",
  "resolve value type variable:res.f - 999",
  "resolve value type array - -1,0.5,true,999",
  "do res.e = -1,0.5,true,999",
]
`;

exports[`TLite aot compiler: array, object res = {b:true, i: 1, v: inp, a: [1,3], o: {nestest: {}}} 1`] = `
TLiteAotCompileVisitor {
  "ctx": CompilerContext {
    "ops": Array [
      Op {
        "op": "MSAVE",
        "params": Object {
          "nextVal": Op {
            "op": "SVAL",
            "params": Object {
              "type": "object",
              "v": Array [
                Object {
                  "key": "b",
                  "val": Op {
                    "op": "SVAL",
                    "params": Object {
                      "type": "bool",
                      "v": true,
                    },
                  },
                },
                Object {
                  "key": "i",
                  "val": Op {
                    "op": "SVAL",
                    "params": Object {
                      "type": "number",
                      "v": 1,
                    },
                  },
                },
                Object {
                  "key": "v",
                  "val": Op {
                    "op": "SVAL",
                    "params": Object {
                      "type": "variable",
                      "v": "inp",
                    },
                  },
                },
                Object {
                  "key": "a",
                  "val": Op {
                    "op": "SVAL",
                    "params": Object {
                      "type": "array",
                      "v": Array [
                        Op {
                          "op": "SVAL",
                          "params": Object {
                            "type": "number",
                            "v": 1,
                          },
                        },
                        Op {
                          "op": "SVAL",
                          "params": Object {
                            "type": "number",
                            "v": 3,
                          },
                        },
                      ],
                    },
                  },
                },
                Object {
                  "key": "o",
                  "val": Op {
                    "op": "SVAL",
                    "params": Object {
                      "type": "object",
                      "v": Array [
                        Object {
                          "key": "nestest",
                          "val": Op {
                            "op": "SVAL",
                            "params": Object {
                              "type": "object",
                              "v": Array [],
                            },
                          },
                        },
                      ],
                    },
                  },
                },
              ],
            },
          },
          "path": "res",
          "perform": "=",
        },
      },
    ],
  },
}
`;

exports[`TLite aot compiler: array, object res = {b:true, i: 1, v: inp, a: [1,3], o: {nestest: {}}} 2`] = `
Array [
  "resolve value type bool - true",
  "resolve value type number - 1",
  "resolve value type variable:inp - some thing",
  "resolve value type number - 1",
  "resolve value type number - 3",
  "resolve value type array - 1,3",
  "resolve value type object - [object Object]",
  "resolve value type object - [object Object]",
  "resolve value type object - [object Object]",
  "do res = [object Object]",
]
`;

exports[`TLite aot compiler: condition, condition exp if (inp%2 == 0) {isEven = true; nextVal = inp+1} else {isEven = false; nextVal = inp-1} 1`] = `
TLiteAotCompileVisitor {
  "ctx": CompilerContext {
    "ops": Array [
      Op {
        "op": "BRANCH",
        "params": Object {
          "cond": Op {
            "op": "BEXP",
            "params": Object {
              "op": "==",
              "v1": Op {
                "op": "BEXP",
                "params": Object {
                  "op": "%",
                  "v1": Op {
                    "op": "SVAL",
                    "params": Object {
                      "type": "variable",
                      "v": "inp",
                    },
                  },
                  "v2": Op {
                    "op": "SVAL",
                    "params": Object {
                      "type": "number",
                      "v": 2,
                    },
                  },
                },
              },
              "v2": Op {
                "op": "SVAL",
                "params": Object {
                  "type": "number",
                  "v": 0,
                },
              },
            },
          },
          "falseBranch": Array [
            Op {
              "op": "MSAVE",
              "params": Object {
                "nextVal": Op {
                  "op": "SVAL",
                  "params": Object {
                    "type": "bool",
                    "v": false,
                  },
                },
                "path": "isEven",
                "perform": "=",
              },
            },
            Op {
              "op": "MSAVE",
              "params": Object {
                "nextVal": Op {
                  "op": "BEXP",
                  "params": Object {
                    "op": "-",
                    "v1": Op {
                      "op": "SVAL",
                      "params": Object {
                        "type": "variable",
                        "v": "inp",
                      },
                    },
                    "v2": Op {
                      "op": "SVAL",
                      "params": Object {
                        "type": "number",
                        "v": 1,
                      },
                    },
                  },
                },
                "path": "nextVal",
                "perform": "=",
              },
            },
          ],
          "isExp": false,
          "trueBranch": Array [
            Op {
              "op": "MSAVE",
              "params": Object {
                "nextVal": Op {
                  "op": "SVAL",
                  "params": Object {
                    "type": "bool",
                    "v": true,
                  },
                },
                "path": "isEven",
                "perform": "=",
              },
            },
            Op {
              "op": "MSAVE",
              "params": Object {
                "nextVal": Op {
                  "op": "BEXP",
                  "params": Object {
                    "op": "+",
                    "v1": Op {
                      "op": "SVAL",
                      "params": Object {
                        "type": "variable",
                        "v": "inp",
                      },
                    },
                    "v2": Op {
                      "op": "SVAL",
                      "params": Object {
                        "type": "number",
                        "v": 1,
                      },
                    },
                  },
                },
                "path": "nextVal",
                "perform": "=",
              },
            },
          ],
        },
      },
    ],
  },
}
`;

exports[`TLite aot compiler: condition, condition exp if (inp%2 == 0) {isEven = true; nextVal = inp+1} else {isEven = false; nextVal = inp-1} 2`] = `
Array [
  "resolve value type variable:inp - 19",
  "resolve value type number - 2",
  "resolve BEXP % v1:19 v2:2 - 1",
  "resolve value type number - 0",
  "resolve BEXP == v1:1 v2:0 - false",
  "pick BRANCH false",
  "resolve value type bool - false",
  "do isEven = false",
  "resolve value type variable:inp - 19",
  "resolve value type number - 1",
  "resolve BEXP - v1:19 v2:1 - 18",
  "do nextVal = 18",
]
`;

exports[`TLite aot compiler: condition, condition exp if (inp%2 == 0) isEven = true else isEven = false' 1`] = `
TLiteAotCompileVisitor {
  "ctx": CompilerContext {
    "ops": Array [
      Op {
        "op": "BRANCH",
        "params": Object {
          "cond": Op {
            "op": "BEXP",
            "params": Object {
              "op": "==",
              "v1": Op {
                "op": "BEXP",
                "params": Object {
                  "op": "%",
                  "v1": Op {
                    "op": "SVAL",
                    "params": Object {
                      "type": "variable",
                      "v": "inp",
                    },
                  },
                  "v2": Op {
                    "op": "SVAL",
                    "params": Object {
                      "type": "number",
                      "v": 2,
                    },
                  },
                },
              },
              "v2": Op {
                "op": "SVAL",
                "params": Object {
                  "type": "number",
                  "v": 0,
                },
              },
            },
          },
          "falseBranch": Array [
            Op {
              "op": "MSAVE",
              "params": Object {
                "nextVal": Op {
                  "op": "SVAL",
                  "params": Object {
                    "type": "bool",
                    "v": false,
                  },
                },
                "path": "isEven",
                "perform": "=",
              },
            },
          ],
          "isExp": false,
          "trueBranch": Array [
            Op {
              "op": "MSAVE",
              "params": Object {
                "nextVal": Op {
                  "op": "SVAL",
                  "params": Object {
                    "type": "bool",
                    "v": true,
                  },
                },
                "path": "isEven",
                "perform": "=",
              },
            },
          ],
        },
      },
    ],
  },
}
`;

exports[`TLite aot compiler: condition, condition exp if (inp%2 == 0) isEven = true else isEven = false' 2`] = `
Array [
  "resolve value type variable:inp - 19",
  "resolve value type number - 2",
  "resolve BEXP % v1:19 v2:2 - 1",
  "resolve value type number - 0",
  "resolve BEXP == v1:1 v2:0 - false",
  "pick BRANCH false",
  "resolve value type bool - false",
  "do isEven = false",
]
`;

exports[`TLite aot compiler: condition, condition exp res = inp > 18 ? 'mature' : 'teen' 1`] = `
TLiteAotCompileVisitor {
  "ctx": CompilerContext {
    "ops": Array [
      Op {
        "op": "MSAVE",
        "params": Object {
          "nextVal": Op {
            "op": "BRANCH",
            "params": Object {
              "cond": Op {
                "op": "BEXP",
                "params": Object {
                  "op": ">",
                  "v1": Op {
                    "op": "SVAL",
                    "params": Object {
                      "type": "variable",
                      "v": "inp",
                    },
                  },
                  "v2": Op {
                    "op": "SVAL",
                    "params": Object {
                      "type": "number",
                      "v": 18,
                    },
                  },
                },
              },
              "falseBranch": Array [
                Op {
                  "op": "SVAL",
                  "params": Object {
                    "type": "string",
                    "v": "teen",
                  },
                },
              ],
              "isExp": true,
              "trueBranch": Array [
                Op {
                  "op": "SVAL",
                  "params": Object {
                    "type": "string",
                    "v": "mature",
                  },
                },
              ],
            },
          },
          "path": "res",
          "perform": "=",
        },
      },
    ],
  },
}
`;

exports[`TLite aot compiler: condition, condition exp res = inp > 18 ? 'mature' : 'teen' 2`] = `
Array [
  "resolve value type variable:inp - 19",
  "resolve value type number - 18",
  "resolve BEXP > v1:19 v2:18 - true",
  "pick BRANCH true",
  "resolve value type string - mature",
  "do res = mature",
]
`;

exports[`TLite aot compiler: expression, assignment 1 + (3 * 5)**2 1`] = `
TLiteAotCompileVisitor {
  "ctx": CompilerContext {
    "ops": Array [
      Op {
        "op": "BEXP",
        "params": Object {
          "op": "+",
          "v1": Op {
            "op": "SVAL",
            "params": Object {
              "type": "number",
              "v": 1,
            },
          },
          "v2": Op {
            "op": "BEXP",
            "params": Object {
              "op": "**",
              "v1": Op {
                "op": "BEXP",
                "params": Object {
                  "op": "*",
                  "v1": Op {
                    "op": "SVAL",
                    "params": Object {
                      "type": "number",
                      "v": 3,
                    },
                  },
                  "v2": Op {
                    "op": "SVAL",
                    "params": Object {
                      "type": "number",
                      "v": 5,
                    },
                  },
                },
              },
              "v2": Op {
                "op": "SVAL",
                "params": Object {
                  "type": "number",
                  "v": 2,
                },
              },
            },
          },
        },
      },
    ],
  },
}
`;

exports[`TLite aot compiler: expression, assignment 1 + (3 * 5)**2 2`] = `
Array [
  "resolve value type number - 1",
  "resolve value type number - 3",
  "resolve value type number - 5",
  "resolve BEXP * v1:3 v2:5 - 15",
  "resolve value type number - 2",
  "resolve BEXP ** v1:15 v2:2 - 225",
  "resolve BEXP + v1:1 v2:225 - 226",
]
`;

exports[`TLite aot compiler: expression, assignment res = !(+inp < 2 || +inp > 5) 1`] = `
TLiteAotCompileVisitor {
  "ctx": CompilerContext {
    "ops": Array [
      Op {
        "op": "MSAVE",
        "params": Object {
          "nextVal": Op {
            "op": "UEXP",
            "params": Object {
              "arg": Op {
                "op": "BEXP",
                "params": Object {
                  "op": "||",
                  "v1": Op {
                    "op": "BEXP",
                    "params": Object {
                      "op": "<",
                      "v1": Op {
                        "op": "UEXP",
                        "params": Object {
                          "arg": Op {
                            "op": "SVAL",
                            "params": Object {
                              "type": "variable",
                              "v": "inp",
                            },
                          },
                          "op": "+",
                        },
                      },
                      "v2": Op {
                        "op": "SVAL",
                        "params": Object {
                          "type": "number",
                          "v": 2,
                        },
                      },
                    },
                  },
                  "v2": Op {
                    "op": "BEXP",
                    "params": Object {
                      "op": ">",
                      "v1": Op {
                        "op": "UEXP",
                        "params": Object {
                          "arg": Op {
                            "op": "SVAL",
                            "params": Object {
                              "type": "variable",
                              "v": "inp",
                            },
                          },
                          "op": "+",
                        },
                      },
                      "v2": Op {
                        "op": "SVAL",
                        "params": Object {
                          "type": "number",
                          "v": 5,
                        },
                      },
                    },
                  },
                },
              },
              "op": "!",
            },
          },
          "path": "res",
          "perform": "=",
        },
      },
    ],
  },
}
`;

exports[`TLite aot compiler: expression, assignment res = !(+inp < 2 || +inp > 5) 2`] = `
Array [
  "resolve value type variable:inp - -1",
  "resolve BEXP + v:-1 - -1",
  "resolve value type number - 2",
  "resolve BEXP < v1:-1 v2:2 - true",
  "resolve value type variable:inp - -1",
  "resolve BEXP + v:-1 - -1",
  "resolve value type number - 5",
  "resolve BEXP > v1:-1 v2:5 - false",
  "resolve BEXP || v1:true v2:false - true",
  "resolve BEXP ! v:true - false",
  "do res = false",
]
`;

exports[`TLite aot compiler: expression, assignment res = 'hello' 1`] = `
TLiteAotCompileVisitor {
  "ctx": CompilerContext {
    "ops": Array [
      Op {
        "op": "MSAVE",
        "params": Object {
          "nextVal": Op {
            "op": "SVAL",
            "params": Object {
              "type": "string",
              "v": "hello",
            },
          },
          "path": "res",
          "perform": "=",
        },
      },
      Op {
        "op": "MSAVE",
        "params": Object {
          "nextVal": Op {
            "op": "SVAL",
            "params": Object {
              "type": "string",
              "v": "hi",
            },
          },
          "path": "res",
          "perform": "=",
        },
      },
    ],
  },
}
`;

exports[`TLite aot compiler: expression, assignment res = 'hello' 2`] = `
Array [
  "resolve value type string - hello",
  "do res = hello",
  "resolve value type string - hi",
  "do res = hi",
]
`;

exports[`TLite aot compiler: expression, assignment res = 1 + (3 * 5)/2 1`] = `
TLiteAotCompileVisitor {
  "ctx": CompilerContext {
    "ops": Array [
      Op {
        "op": "MSAVE",
        "params": Object {
          "nextVal": Op {
            "op": "BEXP",
            "params": Object {
              "op": "+",
              "v1": Op {
                "op": "SVAL",
                "params": Object {
                  "type": "number",
                  "v": 1,
                },
              },
              "v2": Op {
                "op": "BEXP",
                "params": Object {
                  "op": "/",
                  "v1": Op {
                    "op": "BEXP",
                    "params": Object {
                      "op": "*",
                      "v1": Op {
                        "op": "SVAL",
                        "params": Object {
                          "type": "number",
                          "v": 3,
                        },
                      },
                      "v2": Op {
                        "op": "SVAL",
                        "params": Object {
                          "type": "number",
                          "v": 5,
                        },
                      },
                    },
                  },
                  "v2": Op {
                    "op": "SVAL",
                    "params": Object {
                      "type": "number",
                      "v": 2,
                    },
                  },
                },
              },
            },
          },
          "path": "res",
          "perform": "=",
        },
      },
    ],
  },
}
`;

exports[`TLite aot compiler: expression, assignment res = 1 + (3 * 5)/2 2`] = `
Array [
  "resolve value type number - 1",
  "resolve value type number - 3",
  "resolve value type number - 5",
  "resolve BEXP * v1:3 v2:5 - 15",
  "resolve value type number - 2",
  "resolve BEXP / v1:15 v2:2 - 7.5",
  "resolve BEXP + v1:1 v2:7.5 - 8.5",
  "do res = 8.5",
]
`;

exports[`TLite aot compiler: expression, assignment res = inp < 2 || inp > 5 1`] = `
TLiteAotCompileVisitor {
  "ctx": CompilerContext {
    "ops": Array [
      Op {
        "op": "MSAVE",
        "params": Object {
          "nextVal": Op {
            "op": "BEXP",
            "params": Object {
              "op": "||",
              "v1": Op {
                "op": "BEXP",
                "params": Object {
                  "op": "<",
                  "v1": Op {
                    "op": "SVAL",
                    "params": Object {
                      "type": "variable",
                      "v": "inp",
                    },
                  },
                  "v2": Op {
                    "op": "SVAL",
                    "params": Object {
                      "type": "number",
                      "v": 2,
                    },
                  },
                },
              },
              "v2": Op {
                "op": "BEXP",
                "params": Object {
                  "op": ">",
                  "v1": Op {
                    "op": "SVAL",
                    "params": Object {
                      "type": "variable",
                      "v": "inp",
                    },
                  },
                  "v2": Op {
                    "op": "SVAL",
                    "params": Object {
                      "type": "number",
                      "v": 5,
                    },
                  },
                },
              },
            },
          },
          "path": "res",
          "perform": "=",
        },
      },
    ],
  },
}
`;

exports[`TLite aot compiler: expression, assignment res = inp < 2 || inp > 5 2`] = `
Array [
  "resolve value type variable:inp - 1",
  "resolve value type number - 2",
  "resolve BEXP < v1:1 v2:2 - true",
  "resolve value type variable:inp - 1",
  "resolve value type number - 5",
  "resolve BEXP > v1:1 v2:5 - false",
  "resolve BEXP || v1:true v2:false - true",
  "do res = true",
]
`;

exports[`TLite aot compiler: expression, assignment res = inp <= 2 1`] = `
TLiteAotCompileVisitor {
  "ctx": CompilerContext {
    "ops": Array [
      Op {
        "op": "MSAVE",
        "params": Object {
          "nextVal": Op {
            "op": "BEXP",
            "params": Object {
              "op": "<=",
              "v1": Op {
                "op": "SVAL",
                "params": Object {
                  "type": "variable",
                  "v": "inp",
                },
              },
              "v2": Op {
                "op": "SVAL",
                "params": Object {
                  "type": "number",
                  "v": 2,
                },
              },
            },
          },
          "path": "res",
          "perform": "=",
        },
      },
    ],
  },
}
`;

exports[`TLite aot compiler: expression, assignment res = inp <= 2 2`] = `
Array [
  "resolve value type variable:inp - 3",
  "resolve value type number - 2",
  "resolve BEXP <= v1:3 v2:2 - false",
  "do res = false",
]
`;

exports[`TLite aot compiler: expression, assignment res = inp > 2 && inp <= 5 1`] = `
TLiteAotCompileVisitor {
  "ctx": CompilerContext {
    "ops": Array [
      Op {
        "op": "MSAVE",
        "params": Object {
          "nextVal": Op {
            "op": "BEXP",
            "params": Object {
              "op": "&&",
              "v1": Op {
                "op": "BEXP",
                "params": Object {
                  "op": ">",
                  "v1": Op {
                    "op": "SVAL",
                    "params": Object {
                      "type": "variable",
                      "v": "inp",
                    },
                  },
                  "v2": Op {
                    "op": "SVAL",
                    "params": Object {
                      "type": "number",
                      "v": 2,
                    },
                  },
                },
              },
              "v2": Op {
                "op": "BEXP",
                "params": Object {
                  "op": "<=",
                  "v1": Op {
                    "op": "SVAL",
                    "params": Object {
                      "type": "variable",
                      "v": "inp",
                    },
                  },
                  "v2": Op {
                    "op": "SVAL",
                    "params": Object {
                      "type": "number",
                      "v": 5,
                    },
                  },
                },
              },
            },
          },
          "path": "res",
          "perform": "=",
        },
      },
    ],
  },
}
`;

exports[`TLite aot compiler: expression, assignment res = inp > 2 && inp <= 5 2`] = `
Array [
  "resolve value type variable:inp - 1",
  "resolve value type number - 2",
  "resolve BEXP > v1:1 v2:2 - false",
  "resolve value type variable:inp - 1",
  "resolve value type number - 5",
  "resolve BEXP <= v1:1 v2:5 - true",
  "resolve BEXP && v1:false v2:true - false",
  "do res = false",
]
`;

exports[`TLite aot compiler: expression, assignment res = inp > 2 1`] = `
TLiteAotCompileVisitor {
  "ctx": CompilerContext {
    "ops": Array [
      Op {
        "op": "MSAVE",
        "params": Object {
          "nextVal": Op {
            "op": "BEXP",
            "params": Object {
              "op": ">",
              "v1": Op {
                "op": "SVAL",
                "params": Object {
                  "type": "variable",
                  "v": "inp",
                },
              },
              "v2": Op {
                "op": "SVAL",
                "params": Object {
                  "type": "number",
                  "v": 2,
                },
              },
            },
          },
          "path": "res",
          "perform": "=",
        },
      },
    ],
  },
}
`;

exports[`TLite aot compiler: expression, assignment res = inp > 2 2`] = `
Array [
  "resolve value type variable:inp - 3",
  "resolve value type number - 2",
  "resolve BEXP > v1:3 v2:2 - true",
  "do res = true",
]
`;

exports[`TLite aot compiler: func call echo('hi') 1`] = `
TLiteAotCompileVisitor {
  "ctx": CompilerContext {
    "ops": Array [
      Op {
        "op": "FUNCALL",
        "params": Object {
          "args": Array [
            Op {
              "op": "SVAL",
              "params": Object {
                "type": "string",
                "v": "hi",
              },
            },
          ],
          "name": "echo",
        },
      },
    ],
  },
}
`;

exports[`TLite aot compiler: func call echo('hi') 2`] = `
Array [
  "resolve value type string - hi",
  "resolve FUNCALL echo args:hi - undefined",
]
`;

exports[`TLite aot compiler: func call tmp = {a: {b: 'VIETNAM'}}; res = concat(inp, toUpper('hello'), tmp.a.b) 1`] = `
TLiteAotCompileVisitor {
  "ctx": CompilerContext {
    "ops": Array [
      Op {
        "op": "MSAVE",
        "params": Object {
          "nextVal": Op {
            "op": "SVAL",
            "params": Object {
              "type": "object",
              "v": Array [
                Object {
                  "key": "a",
                  "val": Op {
                    "op": "SVAL",
                    "params": Object {
                      "type": "object",
                      "v": Array [
                        Object {
                          "key": "b",
                          "val": Op {
                            "op": "SVAL",
                            "params": Object {
                              "type": "string",
                              "v": "VIETNAM",
                            },
                          },
                        },
                      ],
                    },
                  },
                },
              ],
            },
          },
          "path": "tmp",
          "perform": "=",
        },
      },
      Op {
        "op": "MSAVE",
        "params": Object {
          "nextVal": Op {
            "op": "FUNCALL",
            "params": Object {
              "args": Array [
                Op {
                  "op": "SVAL",
                  "params": Object {
                    "type": "variable",
                    "v": "inp",
                  },
                },
                Op {
                  "op": "FUNCALL",
                  "params": Object {
                    "args": Array [
                      Op {
                        "op": "SVAL",
                        "params": Object {
                          "type": "string",
                          "v": "hello",
                        },
                      },
                    ],
                    "name": "toUpper",
                  },
                },
                Op {
                  "op": "SVAL",
                  "params": Object {
                    "type": "variable",
                    "v": "tmp.a.b",
                  },
                },
              ],
              "name": "concat",
            },
          },
          "path": "res",
          "perform": "=",
        },
      },
    ],
  },
}
`;

exports[`TLite aot compiler: func call tmp = {a: {b: 'VIETNAM'}}; res = concat(inp, toUpper('hello'), tmp.a.b) 2`] = `
Array [
  "resolve value type string - VIETNAM",
  "resolve value type object - [object Object]",
  "resolve value type object - [object Object]",
  "do tmp = [object Object]",
  "resolve value type variable:inp - TLite",
  "resolve value type string - hello",
  "resolve FUNCALL toUpper args:hello - HELLO",
  "resolve value type variable:tmp.a.b - VIETNAM",
  "resolve FUNCALL concat args:TLite,HELLO,VIETNAM - TLite HELLO VIETNAM",
  "do res = TLite HELLO VIETNAM",
]
`;
