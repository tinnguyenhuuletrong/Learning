/* AutoGenerated Code, changes may be overwritten
 * INPUT GRAMMAR:
 * fn   := _ '\[' _ arg=argList* _ '\]' _ exp=expression _
 * argList   :=  v=variable _
 * expression :=  left=expression _ op='\+' _ right=term
 *                | left=expression _ op='-' _ right=term
 *                | term
 * term       := left=term _ op='\*' _ right=factor
 *               | left=term _ op='\/' _ right=factor
 *               | factor
 * factor     := num
 *               | variable
 *               | '\(' _ exp=expression _ '\)'
 * variable :='[a-z]+'
 * num :='[0-9]+'
 * _ :='\s*'
 */
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
  kind: ASTKinds;
}
export enum ASTKinds {
  fn,
  argList,
  expression_1,
  expression_2,
  expression_3,
  term_1,
  term_2,
  term_3,
  factor_1,
  factor_2,
  factor_3,
  variable,
  num,
  _,
}
export interface fn {
  kind: ASTKinds.fn;
  arg: argList[];
  exp: expression;
}
export interface argList {
  kind: ASTKinds.argList;
  v: variable;
}
export type expression = expression_1 | expression_2 | expression_3;
export interface expression_1 {
  kind: ASTKinds.expression_1;
  left: expression;
  op: string;
  right: term;
}
export interface expression_2 {
  kind: ASTKinds.expression_2;
  left: expression;
  op: string;
  right: term;
}
export type expression_3 = term;
export type term = term_1 | term_2 | term_3;
export interface term_1 {
  kind: ASTKinds.term_1;
  left: term;
  op: string;
  right: factor;
}
export interface term_2 {
  kind: ASTKinds.term_2;
  left: term;
  op: string;
  right: factor;
}
export type term_3 = factor;
export type factor = factor_1 | factor_2 | factor_3;
export type factor_1 = num;
export type factor_2 = variable;
export interface factor_3 {
  kind: ASTKinds.factor_3;
  exp: expression;
}
export type variable = string;
export type num = string;
export type _ = string;
export class Parser {
  private readonly input: string;
  private pos: PosInfo;
  private negating: boolean = false;
  private memoSafe: boolean = true;
  constructor(input: string) {
    this.pos = { overallPos: 0, line: 1, offset: 0 };
    this.input = input;
  }
  public reset(pos: PosInfo) {
    this.pos = pos;
  }
  public finished(): boolean {
    return this.pos.overallPos === this.input.length;
  }
  public clearMemos(): void {
    this.$scope$fn$memo.clear();
    this.$scope$argList$memo.clear();
    this.$scope$expression$memo.clear();
    this.$scope$term$memo.clear();
    this.$scope$factor$memo.clear();
    this.$scope$variable$memo.clear();
    this.$scope$num$memo.clear();
    this.$scope$_$memo.clear();
  }
  protected $scope$fn$memo: Map<number, [Nullable<fn>, PosInfo]> = new Map();
  protected $scope$argList$memo: Map<number, [Nullable<argList>, PosInfo]> =
    new Map();
  protected $scope$expression$memo: Map<
    number,
    [Nullable<expression>, PosInfo]
  > = new Map();
  protected $scope$term$memo: Map<number, [Nullable<term>, PosInfo]> =
    new Map();
  protected $scope$factor$memo: Map<number, [Nullable<factor>, PosInfo]> =
    new Map();
  protected $scope$variable$memo: Map<number, [Nullable<variable>, PosInfo]> =
    new Map();
  protected $scope$num$memo: Map<number, [Nullable<num>, PosInfo]> = new Map();
  protected $scope$_$memo: Map<number, [Nullable<_>, PosInfo]> = new Map();
  public matchfn($$dpth: number, $$cr?: ErrorTracker): Nullable<fn> {
    return this.memoise(() => {
      return this.run<fn>($$dpth, () => {
        let $scope$arg: Nullable<argList[]>;
        let $scope$exp: Nullable<expression>;
        let $$res: Nullable<fn> = null;
        if (
          true &&
          this.match_($$dpth + 1, $$cr) !== null &&
          this.regexAccept(String.raw`(?:\[)`, $$dpth + 1, $$cr) !== null &&
          this.match_($$dpth + 1, $$cr) !== null &&
          ($scope$arg = this.loop<argList>(
            () => this.matchargList($$dpth + 1, $$cr),
            true
          )) !== null &&
          this.match_($$dpth + 1, $$cr) !== null &&
          this.regexAccept(String.raw`(?:\])`, $$dpth + 1, $$cr) !== null &&
          this.match_($$dpth + 1, $$cr) !== null &&
          ($scope$exp = this.matchexpression($$dpth + 1, $$cr)) !== null &&
          this.match_($$dpth + 1, $$cr) !== null
        ) {
          $$res = { kind: ASTKinds.fn, arg: $scope$arg, exp: $scope$exp };
        }
        return $$res;
      });
    }, this.$scope$fn$memo);
  }
  public matchargList($$dpth: number, $$cr?: ErrorTracker): Nullable<argList> {
    return this.memoise(() => {
      return this.run<argList>($$dpth, () => {
        let $scope$v: Nullable<variable>;
        let $$res: Nullable<argList> = null;
        if (
          true &&
          ($scope$v = this.matchvariable($$dpth + 1, $$cr)) !== null &&
          this.match_($$dpth + 1, $$cr) !== null
        ) {
          $$res = { kind: ASTKinds.argList, v: $scope$v };
        }
        return $$res;
      });
    }, this.$scope$argList$memo);
  }
  public matchexpression(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<expression> {
    const fn = () => {
      return this.choice<expression>([
        () => this.matchexpression_1($$dpth + 1, $$cr),
        () => this.matchexpression_2($$dpth + 1, $$cr),
        () => this.matchexpression_3($$dpth + 1, $$cr),
      ]);
    };
    const $scope$pos = this.mark();
    const memo = this.$scope$expression$memo.get($scope$pos.overallPos);
    if (memo !== undefined) {
      this.reset(memo[1]);
      return memo[0];
    }
    const $scope$oldMemoSafe = this.memoSafe;
    this.memoSafe = false;
    this.$scope$expression$memo.set($scope$pos.overallPos, [null, $scope$pos]);
    let lastRes: Nullable<expression> = null;
    let lastPos: PosInfo = $scope$pos;
    for (;;) {
      this.reset($scope$pos);
      const res = fn();
      const end = this.mark();
      if (end.overallPos <= lastPos.overallPos) break;
      lastRes = res;
      lastPos = end;
      this.$scope$expression$memo.set($scope$pos.overallPos, [
        lastRes,
        lastPos,
      ]);
    }
    this.reset(lastPos);
    this.memoSafe = $scope$oldMemoSafe;
    return lastRes;
  }
  public matchexpression_1(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<expression_1> {
    return this.run<expression_1>($$dpth, () => {
      let $scope$left: Nullable<expression>;
      let $scope$op: Nullable<string>;
      let $scope$right: Nullable<term>;
      let $$res: Nullable<expression_1> = null;
      if (
        true &&
        ($scope$left = this.matchexpression($$dpth + 1, $$cr)) !== null &&
        this.match_($$dpth + 1, $$cr) !== null &&
        ($scope$op = this.regexAccept(String.raw`(?:\+)`, $$dpth + 1, $$cr)) !==
          null &&
        this.match_($$dpth + 1, $$cr) !== null &&
        ($scope$right = this.matchterm($$dpth + 1, $$cr)) !== null
      ) {
        $$res = {
          kind: ASTKinds.expression_1,
          left: $scope$left,
          op: $scope$op,
          right: $scope$right,
        };
      }
      return $$res;
    });
  }
  public matchexpression_2(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<expression_2> {
    return this.run<expression_2>($$dpth, () => {
      let $scope$left: Nullable<expression>;
      let $scope$op: Nullable<string>;
      let $scope$right: Nullable<term>;
      let $$res: Nullable<expression_2> = null;
      if (
        true &&
        ($scope$left = this.matchexpression($$dpth + 1, $$cr)) !== null &&
        this.match_($$dpth + 1, $$cr) !== null &&
        ($scope$op = this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr)) !==
          null &&
        this.match_($$dpth + 1, $$cr) !== null &&
        ($scope$right = this.matchterm($$dpth + 1, $$cr)) !== null
      ) {
        $$res = {
          kind: ASTKinds.expression_2,
          left: $scope$left,
          op: $scope$op,
          right: $scope$right,
        };
      }
      return $$res;
    });
  }
  public matchexpression_3(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<expression_3> {
    return this.matchterm($$dpth + 1, $$cr);
  }
  public matchterm($$dpth: number, $$cr?: ErrorTracker): Nullable<term> {
    const fn = () => {
      return this.choice<term>([
        () => this.matchterm_1($$dpth + 1, $$cr),
        () => this.matchterm_2($$dpth + 1, $$cr),
        () => this.matchterm_3($$dpth + 1, $$cr),
      ]);
    };
    const $scope$pos = this.mark();
    const memo = this.$scope$term$memo.get($scope$pos.overallPos);
    if (memo !== undefined) {
      this.reset(memo[1]);
      return memo[0];
    }
    const $scope$oldMemoSafe = this.memoSafe;
    this.memoSafe = false;
    this.$scope$term$memo.set($scope$pos.overallPos, [null, $scope$pos]);
    let lastRes: Nullable<term> = null;
    let lastPos: PosInfo = $scope$pos;
    for (;;) {
      this.reset($scope$pos);
      const res = fn();
      const end = this.mark();
      if (end.overallPos <= lastPos.overallPos) break;
      lastRes = res;
      lastPos = end;
      this.$scope$term$memo.set($scope$pos.overallPos, [lastRes, lastPos]);
    }
    this.reset(lastPos);
    this.memoSafe = $scope$oldMemoSafe;
    return lastRes;
  }
  public matchterm_1($$dpth: number, $$cr?: ErrorTracker): Nullable<term_1> {
    return this.run<term_1>($$dpth, () => {
      let $scope$left: Nullable<term>;
      let $scope$op: Nullable<string>;
      let $scope$right: Nullable<factor>;
      let $$res: Nullable<term_1> = null;
      if (
        true &&
        ($scope$left = this.matchterm($$dpth + 1, $$cr)) !== null &&
        this.match_($$dpth + 1, $$cr) !== null &&
        ($scope$op = this.regexAccept(String.raw`(?:\*)`, $$dpth + 1, $$cr)) !==
          null &&
        this.match_($$dpth + 1, $$cr) !== null &&
        ($scope$right = this.matchfactor($$dpth + 1, $$cr)) !== null
      ) {
        $$res = {
          kind: ASTKinds.term_1,
          left: $scope$left,
          op: $scope$op,
          right: $scope$right,
        };
      }
      return $$res;
    });
  }
  public matchterm_2($$dpth: number, $$cr?: ErrorTracker): Nullable<term_2> {
    return this.run<term_2>($$dpth, () => {
      let $scope$left: Nullable<term>;
      let $scope$op: Nullable<string>;
      let $scope$right: Nullable<factor>;
      let $$res: Nullable<term_2> = null;
      if (
        true &&
        ($scope$left = this.matchterm($$dpth + 1, $$cr)) !== null &&
        this.match_($$dpth + 1, $$cr) !== null &&
        ($scope$op = this.regexAccept(String.raw`(?:\/)`, $$dpth + 1, $$cr)) !==
          null &&
        this.match_($$dpth + 1, $$cr) !== null &&
        ($scope$right = this.matchfactor($$dpth + 1, $$cr)) !== null
      ) {
        $$res = {
          kind: ASTKinds.term_2,
          left: $scope$left,
          op: $scope$op,
          right: $scope$right,
        };
      }
      return $$res;
    });
  }
  public matchterm_3($$dpth: number, $$cr?: ErrorTracker): Nullable<term_3> {
    return this.matchfactor($$dpth + 1, $$cr);
  }
  public matchfactor($$dpth: number, $$cr?: ErrorTracker): Nullable<factor> {
    return this.memoise(() => {
      return this.choice<factor>([
        () => this.matchfactor_1($$dpth + 1, $$cr),
        () => this.matchfactor_2($$dpth + 1, $$cr),
        () => this.matchfactor_3($$dpth + 1, $$cr),
      ]);
    }, this.$scope$factor$memo);
  }
  public matchfactor_1(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<factor_1> {
    return this.matchnum($$dpth + 1, $$cr);
  }
  public matchfactor_2(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<factor_2> {
    return this.matchvariable($$dpth + 1, $$cr);
  }
  public matchfactor_3(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<factor_3> {
    return this.run<factor_3>($$dpth, () => {
      let $scope$exp: Nullable<expression>;
      let $$res: Nullable<factor_3> = null;
      if (
        true &&
        this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null &&
        this.match_($$dpth + 1, $$cr) !== null &&
        ($scope$exp = this.matchexpression($$dpth + 1, $$cr)) !== null &&
        this.match_($$dpth + 1, $$cr) !== null &&
        this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
      ) {
        $$res = { kind: ASTKinds.factor_3, exp: $scope$exp };
      }
      return $$res;
    });
  }
  public matchvariable(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<variable> {
    return this.memoise(() => {
      return this.regexAccept(String.raw`(?:[a-z]+)`, $$dpth + 1, $$cr);
    }, this.$scope$variable$memo);
  }
  public matchnum($$dpth: number, $$cr?: ErrorTracker): Nullable<num> {
    return this.memoise(() => {
      return this.regexAccept(String.raw`(?:[0-9]+)`, $$dpth + 1, $$cr);
    }, this.$scope$num$memo);
  }
  public match_($$dpth: number, $$cr?: ErrorTracker): Nullable<_> {
    return this.memoise(() => {
      return this.regexAccept(String.raw`(?:\s*)`, $$dpth + 1, $$cr);
    }, this.$scope$_$memo);
  }
  public test(): boolean {
    const mrk = this.mark();
    const res = this.matchfn(0);
    const ans = res !== null;
    this.reset(mrk);
    return ans;
  }
  public parse(): ParseResult {
    const mrk = this.mark();
    const res = this.matchfn(0);
    if (res) return { ast: res, errs: [] };
    this.reset(mrk);
    const rec = new ErrorTracker();
    this.clearMemos();
    this.matchfn(0, rec);
    const err = rec.getErr();
    return { ast: res, errs: err !== null ? [err] : [] };
  }
  public mark(): PosInfo {
    return this.pos;
  }
  private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
    const mrk = this.mark();
    const res: T[] = [];
    for (;;) {
      const t = func();
      if (t === null) {
        break;
      }
      res.push(t);
    }
    if (star || res.length > 0) {
      return res;
    }
    this.reset(mrk);
    return null;
  }
  private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
    const mrk = this.mark();
    const res = fn();
    if (res !== null) return res;
    this.reset(mrk);
    return null;
  }
  private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
    for (const f of fns) {
      const res = f();
      if (res !== null) {
        return res;
      }
    }
    return null;
  }
  private regexAccept(
    match: string,
    dpth: number,
    cr?: ErrorTracker
  ): Nullable<string> {
    return this.run<string>(dpth, () => {
      const reg = new RegExp(match, "y");
      const mrk = this.mark();
      reg.lastIndex = mrk.overallPos;
      const res = this.tryConsume(reg);
      console.log(
        mrk.overallPos,
        reg,
        this.input.slice(mrk.overallPos, this.input.length)
      );
      if (cr) {
        cr.record(mrk, res, {
          kind: "RegexMatch",
          // We substring from 3 to len - 1 to strip off the
          // non-capture group syntax added as a WebKit workaround
          literal: match.substring(3, match.length - 1),
          negated: this.negating,
        });
      }
      return res;
    });
  }
  private tryConsume(reg: RegExp): Nullable<string> {
    const res = reg.exec(this.input);
    if (res) {
      let lineJmp = 0;
      let lind = -1;
      for (let i = 0; i < res[0].length; ++i) {
        if (res[0][i] === "\n") {
          ++lineJmp;
          lind = i;
        }
      }
      this.pos = {
        overallPos: reg.lastIndex,
        line: this.pos.line + lineJmp,
        offset:
          lind === -1
            ? this.pos.offset + res[0].length
            : res[0].length - lind - 1,
      };
      return res[0];
    }
    return null;
  }
  private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
    const mrk = this.mark();
    const res = fn();
    this.reset(mrk);
    return res;
  }
  private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
    const mrk = this.mark();
    const oneg = this.negating;
    this.negating = !oneg;
    const res = fn();
    this.negating = oneg;
    this.reset(mrk);
    return res === null ? true : null;
  }
  private memoise<K>(
    rule: $$RuleType<K>,
    memo: Map<number, [Nullable<K>, PosInfo]>
  ): Nullable<K> {
    const $scope$pos = this.mark();
    const $scope$memoRes = memo.get($scope$pos.overallPos);
    if (this.memoSafe && $scope$memoRes !== undefined) {
      this.reset($scope$memoRes[1]);
      return $scope$memoRes[0];
    }
    const $scope$result = rule();
    if (this.memoSafe)
      memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
    return $scope$result;
  }
}
export function parse(s: string): ParseResult {
  const p = new Parser(s);
  return p.parse();
}
export interface ParseResult {
  ast: Nullable<fn>;
  errs: SyntaxErr[];
}
export interface PosInfo {
  readonly overallPos: number;
  readonly line: number;
  readonly offset: number;
}
export interface RegexMatch {
  readonly kind: "RegexMatch";
  readonly negated: boolean;
  readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
  public pos: PosInfo;
  public expmatches: MatchAttempt[];
  constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
    this.pos = pos;
    this.expmatches = [...expmatches];
  }
  public toString(): string {
    return `Syntax Error at line ${this.pos.line}:${
      this.pos.offset
    }. Expected one of ${this.expmatches.map((x) =>
      x.kind === "EOF" ? " EOF" : ` ${x.negated ? "not " : ""}'${x.literal}'`
    )}`;
  }
}
class ErrorTracker {
  private mxpos: PosInfo = { overallPos: -1, line: -1, offset: -1 };
  private regexset: Set<string> = new Set();
  private pmatches: MatchAttempt[] = [];
  public record(pos: PosInfo, result: any, att: MatchAttempt) {
    if ((result === null) === att.negated) return;
    if (pos.overallPos > this.mxpos.overallPos) {
      this.mxpos = pos;
      this.pmatches = [];
      this.regexset.clear();
    }
    if (this.mxpos.overallPos === pos.overallPos) {
      if (att.kind === "RegexMatch") {
        if (!this.regexset.has(att.literal)) this.pmatches.push(att);
        this.regexset.add(att.literal);
      } else {
        this.pmatches.push(att);
      }
    }
  }
  public getErr(): SyntaxErr | null {
    if (this.mxpos.overallPos !== -1)
      return new SyntaxErr(this.mxpos, this.pmatches);
    return null;
  }
}
