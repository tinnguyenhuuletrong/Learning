### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AffectedRowsOutput {
  count: Int!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createOnePost(data: PostCreateInput!): Post!
  createOneUser(data: UserCreateInput!): User!
  deleteManyPost(where: PostWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteOnePost(where: PostWhereUniqueInput!): Post
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertOnePost(create: PostCreateInput!, update: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Post {
  authors(cursor: UserWhereUniqueInput, skip: Int, take: Int): [User!]!
  id: String!
}

input PostCreateInput {
  authors: UserCreateNestedManyWithoutPostsInput
  id: String
}

input PostCreateNestedManyWithoutAuthorsInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorsInput!]
  create: [PostCreateWithoutAuthorsInput!]
}

input PostCreateOrConnectWithoutAuthorsInput {
  create: PostCreateWithoutAuthorsInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutAuthorsInput {
  id: String
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostOrderByInput {
  id: SortOrder
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  id: StringFilter
}

input PostUpdateInput {
  authors: UserUpdateManyWithoutPostsInput
  id: StringFieldUpdateOperationsInput
}

input PostUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
}

input PostUpdateManyWithWhereWithoutAuthorsInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithoutAuthorsInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorsInput!]
  create: [PostCreateWithoutAuthorsInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorsInput!]
  updateMany: [PostUpdateManyWithWhereWithoutAuthorsInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorsInput!]
}

input PostUpdateWithWhereUniqueWithoutAuthorsInput {
  data: PostUpdateWithoutAuthorsInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithoutAuthorsInput {
  id: StringFieldUpdateOperationsInput
}

input PostUpsertWithWhereUniqueWithoutAuthorsInput {
  create: PostCreateWithoutAuthorsInput!
  update: PostUpdateWithoutAuthorsInput!
  where: PostWhereUniqueInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  authors: UserListRelationFilter
  id: StringFilter
}

input PostWhereUniqueInput {
  id: String
}

type Query {
  post(where: PostWhereUniqueInput!): Post
  posts(cursor: PostWhereUniqueInput, orderBy: [PostOrderByInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  postsCount(cursor: PostWhereUniqueInput, orderBy: PostOrderByInput, skip: Int, take: Int, where: PostWhereInput): Int
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  usersCount(cursor: UserWhereUniqueInput, orderBy: UserOrderByInput, skip: Int, take: Int, where: UserWhereInput): Int
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type User {
  birthDate: DateTime!
  email: String!
  id: String!
  posts(cursor: PostWhereUniqueInput, skip: Int, take: Int): [Post!]!
}

input UserCreateInput {
  birthDate: DateTime!
  email: String!
  id: String
  posts: PostCreateNestedManyWithoutAuthorsInput
}

input UserCreateNestedManyWithoutPostsInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutPostsInput!]
  create: [UserCreateWithoutPostsInput!]
}

input UserCreateOrConnectWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutPostsInput {
  birthDate: DateTime!
  email: String!
  id: String
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByInput {
  birthDate: SortOrder
  email: SortOrder
  id: SortOrder
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  birthDate: DateTimeFilter
  email: StringFilter
  id: StringFilter
}

input UserUpdateInput {
  birthDate: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorsInput
}

input UserUpdateManyMutationInput {
  birthDate: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input UserUpdateManyWithWhereWithoutPostsInput {
  data: UserUpdateManyMutationInput!
  where: UserScalarWhereInput!
}

input UserUpdateManyWithoutPostsInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutPostsInput!]
  create: [UserCreateWithoutPostsInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutPostsInput!]
  updateMany: [UserUpdateManyWithWhereWithoutPostsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutPostsInput!]
}

input UserUpdateWithWhereUniqueWithoutPostsInput {
  data: UserUpdateWithoutPostsInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithoutPostsInput {
  birthDate: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input UserUpsertWithWhereUniqueWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  update: UserUpdateWithoutPostsInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  birthDate: DateTimeFilter
  email: StringFilter
  id: StringFilter
  posts: PostListRelationFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}
