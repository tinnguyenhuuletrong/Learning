{"version":3,"sources":["stores/constant.js","stores/appStore.js","AppContext.js","containers/DisplayIfStep.js","components/ChoiceMode.js","utils/connectionMonitor.js","components/WebRtcHost.js","components/WebRtcClient.js","components/WebRtcStatus.js","components/WebRtcLog.js","components/WebRtcData.js","containers/WebRTCSupport.js","containers/DisplayIfMode.js","App.js","serviceWorker.js","index.js"],"names":["ESTEP","CHOICE_MODE","NOT_CONNECT","CONNECTED","ECLIENT_MODE","HOST","PEER","EACTION","reset","setAppStep","setAppMode","updateConenction","updateWebRTCSupport","initialState","supportWebRTC","appStep","mode","connection","eventSource","EventEmitter","reducer","state","action","newState","window","store","debugDev","console","log","type","DetectRTC","isWebRTCSupported","value","StateContext","createContext","StateProvider","children","Provider","useReducer","useStateValue","useContext","CONSTANT","ECONSTANT","expectedAppStep","check","Array","isArray","Fragment","includes","defaultIndex","tabs","dispatch","setMode","useCallback","onReset","destroy","stepLock","disabled","className","checked","onChange","e","style","margin","DisplayIfStep","onClick","useEffect","errorHandler","err","emit","connectHandler","closeHandler","dataHandler","data","on","off","props","useState","subStep","setSubStep","val","hostSignalData","dispatchHostSignalData","hostAnswer","setHostAnswer","useMemo","connectionMonitor","createNew","p","SimplePeer","initiator","submitAnswer","arr","JSON","parse","Error","forEach","itm","signal","error","copyHostDataClipboard","stringify","copy","toast","message","animate","in","out","join","readOnly","target","inputSignalData","setInputSignalData","answerToHost","dispatchAnswerToHost","doConnect","trickle","copyAnswerDataClipboard","COLOR_MAP","connecting","connected","disconnected","status","setStatus","onChangeStatus","logs","setLogs","msgLog","msg","_time","Date","content","msgLogConnect","msgLogError","msgLogClose","msgLogWithData","textMsg","minHeight","maxHeight","overflowY","padding","map","index","key","String","enable","setEnable","inputMsg","setInputMsg","onMsgChangeCallback","onSendTextMsg","send","placeholder","onKeyPress","event","keyCode","which","expectedMode","checking","setChecking","load","class","App","WebRTCSupport","ChoiceMode","DisplayIfMode","WebRtcHost","WebRtcClient","WebRtcStatus","WebRtcLog","WebRtcData","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.40cbf93b.chunk.js","sourcesContent":["export const ESTEP = {\n  CHOICE_MODE: 'CHOICE_MODE',\n  NOT_CONNECT: 'NOT_CONNECT',\n  CONNECTED: 'CONNECTED'\n}\nexport const ECLIENT_MODE = {\n  HOST: 'HOST',\n  PEER: 'PEER'\n}\nexport const EACTION = {\n  reset: 'reset',\n  setAppStep: 'setAppStep',\n  setAppMode: 'setAppMode',\n  updateConenction: 'updateConenction',\n  updateWebRTCSupport: 'updateWebRTCSupport'\n}\n","import { EventEmitter } from 'events'\nimport DetectRTC from 'detectrtc'\nimport { ESTEP, EACTION } from './constant'\n\nexport const initialState = {\n  supportWebRTC: false,\n  appStep: ESTEP.CHOICE_MODE,\n  mode: '',\n  connection: null,\n  eventSource: new EventEmitter()\n}\n\nconst mainReducer = (state, action) => {\n  console.log('action', action)\n  switch (action.type) {\n    case EACTION.reset:\n      return {\n        ...initialState,\n        eventSource: new EventEmitter(),\n        supportWebRTC: DetectRTC.isWebRTCSupported\n      }\n    case EACTION.updateWebRTCSupport:\n      return {\n        ...state,\n        supportWebRTC: action.value\n      }\n    case EACTION.setAppMode:\n      return {\n        ...state,\n        mode: action.value\n      }\n    case EACTION.setAppStep:\n      return {\n        ...state,\n        appStep: action.value\n      }\n    case EACTION.updateConenction:\n      return {\n        ...state,\n        connection: action.value\n      }\n    default:\n      return state\n  }\n}\n\nconst debugDev = reducer => (state, action) => {\n  const newState = reducer(state, action)\n  window.store = newState\n  return newState\n}\n\nexport const reducer = debugDev(mainReducer)\n","import React, { createContext, useContext, useReducer } from 'react'\nimport { initialState, reducer } from './stores/appStore'\nimport * as ECONSTANT from './stores/constant'\n\nexport const StateContext = createContext()\nexport const StateProvider = ({ children }) => (\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </StateContext.Provider>\n)\nexport const useStateValue = () => useContext(StateContext)\nexport const CONSTANT = ECONSTANT\n","import React from 'react'\nimport { useStateValue } from '../AppContext'\n\nexport default ({ expectedAppStep, children }) => {\n  const [{ appStep }] = useStateValue()\n  const check = Array.isArray(expectedAppStep)\n    ? expectedAppStep\n    : [expectedAppStep]\n  return (\n    <React.Fragment>{check.includes(appStep) ? children : null}</React.Fragment>\n  )\n}\n","import React, { useCallback, useMemo } from 'react'\nimport DisplayIfStep from '../containers/DisplayIfStep'\nimport { useStateValue, CONSTANT } from '../AppContext'\n\nexport default ({ defaultIndex = 0, tabs = [] }) => {\n  const [{ appStep, mode, connection }, dispatch] = useStateValue()\n\n  const setMode = useCallback(\n    mode => {\n      dispatch({\n        type: CONSTANT.EACTION.setAppMode,\n        value: mode\n      })\n      dispatch({\n        type: CONSTANT.EACTION.setAppStep,\n        value: CONSTANT.ESTEP.NOT_CONNECT\n      })\n    },\n    [dispatch]\n  )\n\n  const onReset = useCallback(() => {\n    connection && connection.destroy && connection.destroy()\n    dispatch({\n      type: CONSTANT.EACTION.reset\n    })\n  }, [dispatch, connection])\n\n  const stepLock =\n    appStep === CONSTANT.ESTEP.CHOICE_MODE\n      ? { disabled: false }\n      : { disabled: true }\n\n  return (\n    <div className=\"columns is-multiline\">\n      <div className=\"column is-full\">\n        <fieldset {...stepLock}>\n          <div className=\"field is-grouped is-grouped-centered\">\n            <label className=\"radio\">\n              <input\n                type=\"radio\"\n                checked={mode === CONSTANT.ECLIENT_MODE.HOST}\n                onChange={e => setMode(CONSTANT.ECLIENT_MODE.HOST)}\n              />\n              <span style={{ margin: 5 }}>Host</span>\n            </label>\n            <label className=\"radio\">\n              <input\n                type=\"radio\"\n                checked={mode === CONSTANT.ECLIENT_MODE.PEER}\n                onChange={e => setMode(CONSTANT.ECLIENT_MODE.PEER)}\n              />\n              <span style={{ margin: 5 }}>Peer</span>\n            </label>\n          </div>\n        </fieldset>\n      </div>\n      <div className=\"column\">\n        <div className=\"field is-grouped is-grouped-centered\">\n          <DisplayIfStep\n            expectedAppStep={[\n              CONSTANT.ESTEP.CONNECTED,\n              CONSTANT.ESTEP.NOT_CONNECT\n            ]}\n          >\n            <button className=\"button is-warning\" onClick={onReset}>\n              Reset\n            </button>\n          </DisplayIfStep>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import { useEffect } from 'react'\nimport { CONSTANT } from '../AppContext'\n\nexport default (connection, eventSource, dispatch) => {\n  useEffect(() => {\n    if (!connection) return\n\n    const errorHandler = err => eventSource.emit('error', err)\n    const connectHandler = () => {\n      eventSource.emit('connect')\n      dispatch({\n        type: CONSTANT.EACTION.setAppStep,\n        value: CONSTANT.ESTEP.CONNECTED\n      })\n    }\n    const closeHandler = () => {\n      eventSource.emit('close')\n      dispatch({\n        type: CONSTANT.EACTION.setAppStep,\n        value: CONSTANT.ESTEP.NOT_CONNECT\n      })\n    }\n    const dataHandler = data => eventSource.emit('data', data)\n\n    connection.on('error', errorHandler)\n    connection.on('connect', connectHandler)\n    connection.on('data', dataHandler)\n    connection.on('close', closeHandler)\n    return () => {\n      connection.off('error', errorHandler)\n      connection.off('connect', connectHandler)\n      connection.off('data', dataHandler)\n      connection.off('close', closeHandler)\n    }\n  }, [connection, eventSource])\n}\n","import React, { useCallback, useMemo, useReducer, useState } from 'react'\nimport SimplePeer from 'simple-peer'\nimport { toast } from 'bulma-toast'\nimport copy from 'copy-to-clipboard'\n\nimport { useStateValue, CONSTANT } from '../AppContext'\nimport connectionMonitor from '../utils/connectionMonitor'\n\nconst copyClipboard = data => {\n  copy(data)\n  toast({\n    message: 'copied',\n    type: 'is-info',\n    animate: { in: 'fadeIn', out: 'fadeOut' }\n  })\n}\n\nexport default props => {\n  const [{ appStep, mode, connection, eventSource }, dispatch] = useStateValue()\n\n  const [subStep, setSubStep] = useState(1)\n  const [hostSignalData, dispatchHostSignalData] = useReducer((state, val) => {\n    return [...state, val]\n  }, [])\n  const [hostAnswer, setHostAnswer] = useState('')\n\n  const stepLock = useMemo(() => {\n    const isEnable =\n      appStep === CONSTANT.ESTEP.NOT_CONNECT &&\n      mode === CONSTANT.ECLIENT_MODE.HOST\n    return { disabled: !isEnable }\n  }, [appStep, mode])\n\n  // Effect\n  connectionMonitor(connection, eventSource, dispatch)\n\n  // UI Callback\n  const createNew = useCallback(() => {\n    const p = new SimplePeer({\n      initiator: true\n      // trickle: false\n    })\n\n    const signalHandler = data => {\n      const newSignalData = data\n      dispatchHostSignalData(newSignalData)\n    }\n    p.on('signal', signalHandler)\n\n    setSubStep(2)\n    dispatch({\n      type: CONSTANT.EACTION.updateConenction,\n      value: p\n    })\n  }, [dispatch])\n\n  const submitAnswer = useCallback(() => {\n    try {\n      console.log('submit answer', hostAnswer)\n      const arr = JSON.parse(hostAnswer)\n      if (!Array.isArray(arr)) throw new Error('Input signal must be aray')\n\n      arr.forEach(itm => connection.signal(itm))\n    } catch (error) {\n      console.error(error)\n    }\n  }, [hostAnswer, connection])\n\n  const copyHostDataClipboard = useCallback(() => {\n    copyClipboard(JSON.stringify(hostSignalData))\n  }, [hostSignalData])\n\n  return (\n    <fieldset {...stepLock}>\n      <div className=\"field\">\n        <label className=\"label\">\n          Host Signal Data{' '}\n          <a\n            className=\"button is-rounded is-small\"\n            onClick={copyHostDataClipboard}\n          >\n            <i className=\"far fa-clipboard\" />\n          </a>\n        </label>\n        <div\n          className={['control', hostSignalData ? '' : 'is-loading'].join(' ')}\n        >\n          <textarea\n            className={['textarea', 'is-small'].join(' ')}\n            readOnly\n            value={JSON.stringify(hostSignalData)}\n          ></textarea>\n        </div>\n      </div>\n      {subStep === 1 && (\n        <div className=\"field\">\n          <button className=\"button is-primary\" onClick={createNew}>\n            Generate\n          </button>\n        </div>\n      )}\n      {subStep >= 2 && (\n        <React.Fragment>\n          <div className=\"field\">\n            <label className=\"label\">Answer</label>\n            <div className={['control'].join(' ')}>\n              <textarea\n                className={['textarea', 'is-small'].join(' ')}\n                value={hostAnswer}\n                onChange={e => setHostAnswer(e.target.value)}\n              ></textarea>\n            </div>\n          </div>\n          <div className=\"field\">\n            <button className=\"button is-primary\" onClick={submitAnswer}>\n              Connect\n            </button>\n          </div>\n        </React.Fragment>\n      )}\n    </fieldset>\n  )\n}\n","import React, { useCallback, useState, useMemo, useReducer } from 'react'\nimport SimplePeer from 'simple-peer'\nimport { toast } from 'bulma-toast'\nimport copy from 'copy-to-clipboard'\n\nimport { useStateValue, CONSTANT } from '../AppContext'\nimport connectionMonitor from '../utils/connectionMonitor'\n\nconst copyClipboard = data => {\n  copy(data)\n  toast({\n    message: 'copied',\n    type: 'is-info',\n    animate: { in: 'fadeIn', out: 'fadeOut' }\n  })\n}\n\nexport default props => {\n  const [{ appStep, mode, connection, eventSource }, dispatch] = useStateValue()\n\n  const [subStep, setSubStep] = useState(1)\n  const [inputSignalData, setInputSignalData] = useState('')\n  const [answerToHost, dispatchAnswerToHost] = useReducer((state, val) => {\n    return [...state, val]\n  }, [])\n\n  const stepLock = useMemo(() => {\n    const isEnable =\n      appStep === CONSTANT.ESTEP.NOT_CONNECT &&\n      mode === CONSTANT.ECLIENT_MODE.PEER\n    return { disabled: !isEnable }\n  }, [appStep, mode])\n\n  // Effect\n  connectionMonitor(connection, eventSource, dispatch)\n\n  // UI Callback\n  const doConnect = useCallback(() => {\n    console.log('begin connect ', inputSignalData)\n    const p = new SimplePeer({\n      initiator: false,\n      trickle: false\n    })\n\n    const signalHandler = data => {\n      const newSignalData = data\n      dispatchAnswerToHost(newSignalData)\n    }\n    p.on('signal', signalHandler)\n\n    try {\n      const arr = JSON.parse(inputSignalData)\n      if (!Array.isArray(arr)) throw new Error('Input signal must be aray')\n\n      arr.forEach(itm => p.signal(itm))\n\n      setSubStep(2)\n      dispatch({\n        type: CONSTANT.EACTION.updateConenction,\n        value: p\n      })\n    } catch (error) {\n      console.error(error)\n    }\n  }, [inputSignalData, dispatchAnswerToHost, setSubStep, dispatch])\n\n  const copyAnswerDataClipboard = useCallback(() => {\n    copyClipboard(JSON.stringify(answerToHost))\n  }, [answerToHost])\n\n  return (\n    <fieldset {...stepLock}>\n      <div className=\"field\">\n        <label className=\"label\">SignalData from Host</label>\n        <div className={['control'].join(' ')}>\n          <textarea\n            className={['textarea', 'is-small'].join(' ')}\n            value={inputSignalData}\n            onChange={e => setInputSignalData(e.target.value)}\n          />\n        </div>\n      </div>\n      {subStep === 1 && (\n        <div className=\"field\">\n          <button className=\"button is-primary\" onClick={doConnect}>\n            Connect\n          </button>\n        </div>\n      )}\n      {subStep === 2 && (\n        <div className=\"field\">\n          <label className=\"label\">\n            Answer To Host{' '}\n            <a\n              className=\"button is-rounded is-small\"\n              onClick={copyAnswerDataClipboard}\n            >\n              <i className=\"far fa-clipboard\" />\n            </a>\n          </label>\n          <div className={['control'].join(' ')}>\n            <textarea\n              className={['textarea', 'is-small'].join(' ')}\n              readOnly\n              value={JSON.stringify(answerToHost)}\n            />\n          </div>\n        </div>\n      )}\n    </fieldset>\n  )\n}\n","import React, { useCallback, useMemo, useEffect, useState } from 'react'\nimport { useStateValue, CONSTANT } from '../AppContext'\n\nconst COLOR_MAP = {\n  connecting: 'is-link',\n  connected: 'is-primary',\n  error: 'is-danger',\n  disconnected: 'is-warning'\n}\n\nexport default ({ defaultIndex = 0, tabs = [] }) => {\n  const [{ eventSource }] = useStateValue()\n  const [status, setStatus] = useState('connecting')\n\n  useEffect(() => {\n    const onChangeStatus = status => setStatus(status)\n    eventSource.on('connect', e => onChangeStatus('connected'))\n    eventSource.on('close', e => onChangeStatus('disconnected'))\n    eventSource.on('error', e => onChangeStatus('error'))\n  }, [eventSource])\n\n  return (\n    <article className={['message', COLOR_MAP[status]].join(' ')}>\n      <div className=\"message-body\">\n        <p className=\"is-capitalized\">{status}</p>\n      </div>\n    </article>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { useStateValue, CONSTANT } from '../AppContext'\n\nexport default ({ defaultIndex = 0, tabs = [] }) => {\n  const [{ eventSource }] = useStateValue()\n  const [logs, setLogs] = useState([])\n\n  useEffect(() => {\n    const msgLog = msg => () => {\n      setLogs([\n        ...logs,\n        {\n          _time: new Date(),\n          content: msg\n        }\n      ])\n    }\n    const msgLogConnect = msgLog('connected')\n    const msgLogError = msgLog('error')\n    const msgLogClose = msgLog('disconnected')\n\n    const msgSendTextMsg = textMsg => msgLog(`Send -> ${textMsg}`)()\n    const msgLogWithData = msg => msgLog(`Recv -> ${msg}`)()\n\n    eventSource.on('connect', msgLogConnect)\n    eventSource.on('error', msgLogError)\n    eventSource.on('data', msgLogWithData)\n    eventSource.on('close', msgLogClose)\n\n    eventSource.on('action-send-text', msgSendTextMsg)\n\n    return () => {\n      eventSource.off('connect', msgLogConnect)\n      eventSource.off('error', msgLogError)\n      eventSource.off('data', msgLogWithData)\n      eventSource.off('close', msgLogClose)\n    }\n  }, [logs, setLogs, eventSource])\n\n  return (\n    <div className=\"column is-full\">\n      <div\n        className=\"container has-background-grey-lighter is-size-7\"\n        style={{\n          minHeight: '50vh',\n          maxHeight: '50vh',\n          overflowY: 'auto',\n          padding: '5px 10px'\n        }}\n      >\n        {logs.map(({ content, _time }, index) => (\n          <p key={index}>\n            {String(_time)} - {String(content)}\n          </p>\n        ))}\n      </div>\n    </div>\n  )\n}\n","import React, { useEffect, useState, useCallback } from 'react'\nimport { useStateValue, CONSTANT } from '../AppContext'\n\nexport default ({ defaultIndex = 0, tabs = [] }) => {\n  const [{ eventSource, connection }] = useStateValue()\n  const [enable, setEnable] = useState(false)\n  const [inputMsg, setInputMsg] = useState([])\n\n  useEffect(() => {\n    const msgLogConnect = () => setEnable(true)\n    const msgLogClose = () => setEnable(false)\n\n    eventSource.on('connect', msgLogConnect)\n    eventSource.on('close', msgLogClose)\n\n    return () => {\n      eventSource.off('connect', msgLogConnect)\n      eventSource.off('close', msgLogClose)\n    }\n  }, [eventSource, setEnable])\n\n  const onMsgChangeCallback = useCallback(val => setInputMsg(val), [\n    setInputMsg\n  ])\n\n  const onSendTextMsg = useCallback(() => {\n    connection.send(inputMsg)\n    eventSource.emit('action-send-text', inputMsg)\n    onMsgChangeCallback('')\n  }, [inputMsg, connection, eventSource, onMsgChangeCallback])\n\n  return (\n    <fieldset disabled={!enable}>\n      <div className=\"columns\">\n        <div className=\"column is-11\">\n          <input\n            className=\"input\"\n            type=\"text\"\n            placeholder=\"message to send\"\n            value={inputMsg}\n            onChange={e => onMsgChangeCallback(e.target.value)}\n            onKeyPress={e => {\n              if (!e) e = window.event\n              var keyCode = e.keyCode || e.which\n              if (String(keyCode) === '13') {\n                onSendTextMsg(e.target.value)\n                return false\n              }\n            }}\n          />\n        </div>\n        <div className=\"column\">\n          <button className=\"button is-info\" onClick={onSendTextMsg}>\n            Send\n          </button>\n        </div>\n      </div>\n    </fieldset>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport DetectRTC from 'detectrtc'\nimport { useStateValue, CONSTANT } from '../AppContext'\n\nexport default ({ expectedMode, children }) => {\n  const [{ supportWebRTC }, dispatch] = useStateValue()\n  const [checking, setChecking] = useState(true)\n\n  useEffect(() => {\n    DetectRTC.load(() => {\n      dispatch({\n        type: CONSTANT.EACTION.updateWebRTCSupport,\n        value: DetectRTC.isWebRTCSupported\n      })\n      setChecking(false)\n    })\n  }, [dispatch])\n\n  return (\n    <React.Fragment>\n      {checking ? null : supportWebRTC ? (\n        children\n      ) : (\n        <article class=\"message is-danger\">\n          <div class=\"message-body\">Browser don't support WebRTC</div>\n        </article>\n      )}\n    </React.Fragment>\n  )\n}\n","import React from 'react'\nimport { useStateValue } from '../AppContext'\n\nexport default ({ expectedMode, children }) => {\n  const [{ mode }] = useStateValue()\n\n  return (\n    <React.Fragment>{expectedMode === mode ? children : null}</React.Fragment>\n  )\n}\n","import React from 'react'\nimport ChoiceMode from './components/ChoiceMode'\nimport WebRtcHost from './components/WebRtcHost'\nimport WebRtcClient from './components/WebRtcClient'\nimport WebRtcStatus from './components/WebRtcStatus'\nimport WebRtcLog from './components/WebRtcLog'\nimport WebRtcData from './components/WebRtcData'\nimport WebRTCSupport from './containers/WebRTCSupport'\nimport DisplayIfMode from './containers/DisplayIfMode'\nimport { StateProvider, CONSTANT } from './AppContext'\n\nfunction App() {\n  return (\n    <StateProvider>\n      <section className=\"section \">\n        <div className=\"container\">\n          <section className=\"hero\">\n            <div className=\"hero-body\">\n              <div className=\"container\">\n                <h1 className=\"title\">Web RTC Playground</h1>\n              </div>\n            </div>\n          </section>\n          <WebRTCSupport>\n            <p className=\"has-text-centered is-size-3\">Start here !</p>\n            <div className=\"column\">\n              <div className=\"box\">\n                <ChoiceMode />\n              </div>\n            </div>\n\n            <DisplayIfMode expectedMode={CONSTANT.ECLIENT_MODE.HOST}>\n              <div className=\"column\">\n                <div className=\"box\">\n                  <WebRtcHost />\n                </div>\n              </div>\n            </DisplayIfMode>\n\n            <DisplayIfMode expectedMode={CONSTANT.ECLIENT_MODE.PEER}>\n              <div className=\"column\">\n                <div className=\"box\">\n                  <WebRtcClient />\n                </div>\n              </div>\n            </DisplayIfMode>\n\n            <div className=\"column\">\n              <WebRtcStatus />\n            </div>\n\n            <div className=\"column is-multiline\">\n              <div className=\"box\">\n                <WebRtcLog />\n              </div>\n              <div className=\"box\">\n                <WebRtcData />\n              </div>\n            </div>\n          </WebRTCSupport>\n        </div>\n      </section>\n    </StateProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './vendor/import-bulma'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}