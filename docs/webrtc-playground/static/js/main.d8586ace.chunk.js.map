{"version":3,"sources":["stores/constant.js","stores/appStore.js","AppContext.js","containers/DisplayIfStep.js","components/ChoiceMode.js","components/WebRtcConfig.js","utils/connectionMonitor.js","components/WebRtcHost.js","components/WebRtcClient.js","components/WebRtcStatus.js","components/WebRtcLog.js","components/WebRtcData.js","components/VideoPlayer.js","components/WebRtcVideoCall.js","containers/WebRTCSupport.js","containers/DisplayIfMode.js","App.js","serviceWorker.js","index.js"],"names":["ESTEP","CHOICE_MODE","NOT_CONNECT","CONNECTED","ECLIENT_MODE","HOST","PEER","EACTION","reset","setAppStep","setRoomId","setAppMode","setMineMedia","updateConenction","updateWebRTCSupport","Firebase","initializeApp","apiKey","databaseURL","initialState","supportWebRTC","appStep","roomId","Date","now","mode","mineMedia","connection","eventSource","EventEmitter","firebaseDatabase","database","reducer","state","action","newState","window","store","debugDev","console","log","type","previousMedia","previousConnection","getTracks","forEach","track","stop","destroy","DetectRTC","isWebRTCSupported","value","StateContext","createContext","StateProvider","children","Provider","useReducer","useStateValue","useContext","CONSTANT","ECONSTANT","expectedAppStep","check","Array","isArray","Fragment","includes","MediaOptions","video","defaultIndex","tabs","dispatch","useEffect","pageUnload","addEventListener","removeEventListener","setMode","useCallback","onReset","updateRoomId","onGatherVideoCallback","navigator","toast","message","animate","in","out","getUserMedia","stream","err","stepLock","disabled","className","onChange","e","target","placeholder","onClick","checked","style","margin","DisplayIfStep","useState","configJson","setConfig","isCorrect","setIsCorrect","JSON","parse","join","defaultValue","newVal","error","errorHandler","emit","connectHandler","closeHandler","dataHandler","data","on","off","props","subStep","setSubStep","val","hostSignalData","dispatchHostSignalData","hostAnswer","setHostAnswer","rtcConfig","dispatchRtcConfig","useMemo","connectionMonitor","createNew","p","SimplePeer","initiator","roomRef","answerRef","ref","updateAnswerFromFirebase","submitAnswer","arr","Error","itm","signal","copyHostDataClipboard","hostSignalDataStr","stringify","copy","set","onRtcConfigChange","WebRtcConfig","readOnly","inputSignalData","setInputSignalData","answerToHost","dispatchAnswerToHost","hostSignalRef","updateHostSignalFromFirebase","doConnect","copyAnswerDataClipboard","answerStr","COLOR_MAP","connecting","connected","disconnected","status","setStatus","onChangeStatus","logs","setLogs","rtcStats","setRtcStats","intervalTicket","setInterval","clearInterval","getStats","stats","map","id","timestamp","others","msgLog","msg","_time","content","msgLogConnect","msgLogError","msgLogClose","msgLogWithData","textMsg","length","minHeight","maxHeight","overflowY","padding","index","key","String","Object","keys","enable","setEnable","inputMsg","setInputMsg","onMsgChangeCallback","onSendTextMsg","send","onKeyPress","event","keyCode","which","videoRef","useRef","current","srcObject","src","URL","createObjectURL","play","otherStream","setOtherStream","incomingStream","VideoPlayer","expectedMode","checking","setChecking","load","Peer","WEBRTC_SUPPORT","class","App","WebRTCSupport","ChoiceMode","DisplayIfMode","WebRtcHost","WebRtcClient","WebRtcStatus","WebRtcLog","WebRtcData","WebRtcVideoCall","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"4bAAaA,G,MAAQ,CACnBC,YAAa,cACbC,YAAa,cACbC,UAAW,cAEAC,EAAe,CAC1BC,KAAM,OACNC,KAAM,QAEKC,EAAU,CACrBC,MAAO,QACPC,WAAY,aACZC,UAAW,YACXC,WAAY,aACZC,aAAc,eACdC,iBAAkB,mBAClBC,oBAAqB,uB,mjBCLvBC,IAASC,cAJc,CACrBC,OAAQ,0CACRC,YAAa,6CAIR,IAAMC,EAAe,CAC1BC,eAAe,EACfC,QAASrB,EAAMC,YACfqB,OAAO,QAAD,OAAUC,KAAKC,OACrBC,KAAM,GACNC,UAAW,KACXC,WAAY,KACZC,YAAa,IAAIC,eACjBC,iBAAkBf,IAASgB,YA6DhBC,EANI,SAAAA,GAAO,OAAI,SAACC,EAAOC,GAClC,IAAMC,EAAWH,EAAQC,EAAOC,GAEhC,OADAE,OAAOC,MAAQF,EACRA,GAGcG,CA1DH,SAACL,EAAOC,GAE1B,OADAK,QAAQC,IAAI,SAAUN,GACdA,EAAOO,MACb,KAAKlC,EAAQC,MACX,IAAMkC,EAAgBT,EAAMP,UACtBiB,EAAqBV,EAAMN,WAOjC,OANIe,GACFA,EAAcE,YAAYC,QAAQ,SAAAC,GAAK,OAAIA,EAAMC,SAE/CJ,GACFA,EAAmBK,SAAWL,EAAmBK,UAE5C,EAAP,GACK7B,EADL,CAEES,YAAa,IAAIC,eACjBT,cAAe6B,IAAUC,oBAE7B,KAAK3C,EAAQO,oBACX,OAAO,EAAP,GACKmB,EADL,CAEEb,cAAec,EAAOiB,QAE1B,KAAK5C,EAAQI,WACX,OAAO,EAAP,GACKsB,EADL,CAEER,KAAMS,EAAOiB,QAEjB,KAAK5C,EAAQG,UACX,OAAO,EAAP,GACKuB,EADL,CAEEX,OAAQY,EAAOiB,QAEnB,KAAK5C,EAAQE,WACX,OAAO,EAAP,GACKwB,EADL,CAEEZ,QAASa,EAAOiB,QAEpB,KAAK5C,EAAQK,aACX,OAAO,EAAP,GACKqB,EADL,CAEEP,UAAWQ,EAAOiB,QAEtB,KAAK5C,EAAQM,iBACX,OAAO,EAAP,GACKoB,EADL,CAEEN,WAAYO,EAAOiB,QAEvB,QACE,OAAOlB,KCpEAmB,EAAeC,0BACfC,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAC3B,kBAACH,EAAaI,SAAd,CAAuBL,MAAOM,qBAAWzB,EAASb,IAC/CoC,IAGQG,EAAgB,kBAAMC,qBAAWP,IACjCQ,EAAWC,ECRT,cAAoC,IAAjCC,EAAgC,EAAhCA,gBAAiBP,EAAe,EAAfA,SAAe,EAC1BG,IAAbrC,EADuC,oBACvCA,QACH0C,EAAQC,MAAMC,QAAQH,GACxBA,EACA,CAACA,GACL,OACE,kBAAC,IAAMI,SAAP,KAAiBH,EAAMI,SAAS9C,GAAWkC,EAAW,O,OCJpDa,EAAe,CAAEC,OAAO,GAEf,cAAqC,EAAlCC,aAAkC,EAAhBC,KAAiB,IAAD,EACQb,IADR,0BACzCrC,EADyC,EACzCA,QAASI,EADgC,EAChCA,KAAMH,EAD0B,EAC1BA,OAAQK,EADkB,EAClBA,WAAc6C,EADI,KAGlDC,oBAAU,WACR,IAAMC,EAAa,WACjBF,EAAS,CACP/B,KAAMmB,EAASrD,QAAQC,SAI3B,OADA4B,OAAOuC,iBAAiB,eAAgBD,GAAY,GAC7C,WACLtC,OAAOwC,oBAAoB,eAAgBF,KAE5C,CAACF,EAAU7C,IAGd,IAAMkD,EAAUC,sBACd,SAAArD,GACE+C,EAAS,CACP/B,KAAMmB,EAASrD,QAAQI,WACvBwC,MAAO1B,IAET+C,EAAS,CACP/B,KAAMmB,EAASrD,QAAQE,WACvB0C,MAAOS,EAAS5D,MAAME,eAG1B,CAACsE,IAGGO,EAAUD,sBAAY,WAC1BnD,GAAcA,EAAWqB,SAAWrB,EAAWqB,UAC/CwB,EAAS,CACP/B,KAAMmB,EAASrD,QAAQC,SAExB,CAACgE,EAAU7C,IAGRqD,EAAeF,sBACnB,SAAAxD,GACEkD,EAAS,CACP/B,KAAMmB,EAASrD,QAAQG,UACvByC,MAAO7B,KAGX,CAACkD,IAIGS,EAAwBH,sBAAY,WAOxC,IAAKI,UACH,OAAOC,gBAAM,CACXC,QAAQ,gCACR3C,KAAM,WACN4C,QAAS,CAAEC,GAAI,SAAUC,IAAK,aAIlCL,UAAUM,aAAapB,EAdN,SAAAqB,GACfjB,EAAS,CACP/B,KAAMmB,EAASrD,QAAQK,aACvBuC,MAAOsC,KAWoC,SAAAC,GAC7CP,gBAAM,CACJC,QAAQ,WAAD,OAAaM,EAAIN,SACxB3C,KAAM,WACN4C,QAAS,CAAEC,GAAI,SAAUC,IAAK,gBAGjC,CAACf,IAEEmB,EACJtE,IAAYuC,EAAS5D,MAAMC,YACvB,CAAE2F,UAAU,GACZ,CAAEA,UAAU,GAElB,OACE,yBAAKC,UAAU,oCACb,yBAAKA,UAAU,eACb,6BAAcF,EACZ,2BACEE,UAAU,mBACVpD,KAAK,OACLU,MAAO7B,EACPwE,SAAU,SAAAC,GAAC,OAAIf,EAAae,EAAEC,OAAO7C,QACrC8C,YAAY,cAIlB,yBAAKJ,UAAU,kBACb,6BAAcF,EACZ,yBAAKE,UAAU,wCACb,4BACEA,UAAU,oBACVK,QAASjB,GAFX,iBASN,yBAAKY,UAAU,kBACb,6BAAcF,EACZ,yBAAKE,UAAU,wCACb,2BAAOA,UAAU,SACf,2BACEpD,KAAK,QACL0D,QAAS1E,IAASmC,EAASxD,aAAaC,KACxCyF,SAAU,SAAAC,GAAC,OAAIlB,EAAQjB,EAASxD,aAAaC,SAE/C,0BAAM+F,MAAO,CAAEC,OAAQ,IAAvB,SAEF,2BAAOR,UAAU,SACf,2BACEpD,KAAK,QACL0D,QAAS1E,IAASmC,EAASxD,aAAaE,KACxCwF,SAAU,SAAAC,GAAC,OAAIlB,EAAQjB,EAASxD,aAAaE,SAE/C,0BAAM8F,MAAO,CAAEC,OAAQ,IAAvB,YAKR,yBAAKR,UAAU,UACb,yBAAKA,UAAU,wCACb,kBAACS,EAAD,CACExC,gBAAiB,CACfF,EAAS5D,MAAMG,UACfyD,EAAS5D,MAAME,cAGjB,4BAAQ2F,UAAU,oBAAoBK,QAASnB,GAA/C,c,yCC1IG,cAAmB,IAAhBe,EAAe,EAAfA,SAAe,EACCS,mBAAS,0LADV,mBACxBC,EADwB,KACZC,EADY,OAOGF,oBAAS,GAPZ,mBAOxBG,EAPwB,KAObC,EAPa,KAc/B,OAJAlC,oBAAU,WACRqB,GAAYA,EAASc,KAAKC,MAAML,KAC/B,IAGD,yBAAKX,UAAU,SACb,2BAAOA,UAAU,SAAjB,mBACmB,IACjB,0BACEA,UAAW,CACT,OACAa,EAAY,mBAAqB,mBACjCI,KAAK,MAEP,uBACEjB,UAAW,CAAC,MAAOa,EAAY,WAAa,UAAUI,KAAK,SAIjE,yBAAKjB,UAAW,CAAC,WAAWiB,KAAK,MAC/B,8BACEjB,UAAW,CAAC,WAAY,YAAYiB,KAAK,KACzCC,aAAcP,EACdV,SAAU,SAAAC,GACR,IACEU,EAAUV,EAAEC,OAAO7C,OACnB,IAAM6D,EAASJ,KAAKC,MAAMd,EAAEC,OAAO7C,OACnC2C,GAAYA,EAASkB,GACrBL,GAAa,GACb,MAAOM,GACPN,GAAa,UCvCZ,WAAChF,EAAYC,EAAa4C,GACvCC,oBAAU,WACR,GAAK9C,EAAL,CAEA,IAAMuF,EAAe,SAAAxB,GAAG,OAAI9D,EAAYuF,KAAK,QAASzB,IAChD0B,EAAiB,WACrBxF,EAAYuF,KAAK,WACjB3C,EAAS,CACP/B,KAAMmB,EAASrD,QAAQE,WACvB0C,MAAOS,EAAS5D,MAAMG,aAGpBkH,EAAe,WACnBzF,EAAYuF,KAAK,SACjB3C,EAAS,CACP/B,KAAMmB,EAASrD,QAAQE,WACvB0C,MAAOS,EAAS5D,MAAME,eAGpBoH,EAAc,SAAAC,GAAI,OAAI3F,EAAYuF,KAAK,OAAQI,IAQrD,OANA5F,EAAW6F,GAAG,QAASN,GACvBvF,EAAW6F,GAAG,UAAWJ,GACzBzF,EAAW6F,GAAG,OAAQF,GACtB3F,EAAW6F,GAAG,QAASH,GACvB1F,EAAW6F,GAAG,SAAU,SAAA/B,GAAM,OAAIlD,QAAQC,IAAI,SAAUiD,KAEjD,WACL9D,EAAW8F,IAAI,QAASP,GACxBvF,EAAW8F,IAAI,UAAWL,GAC1BzF,EAAW8F,IAAI,OAAQH,GACvB3F,EAAW8F,IAAI,QAASJ,MAEzB,CAAC1F,EAAYC,EAAa4C,K,mjBCpB/B,IASe,WAAAkD,GAAU,IAAD,EAYlBhE,IAZkB,0BAGlBrC,EAHkB,EAGlBA,QACAC,EAJkB,EAIlBA,OACAG,EALkB,EAKlBA,KACAC,EANkB,EAMlBA,UACAC,EAPkB,EAOlBA,WACAC,EARkB,EAQlBA,YACAE,EATkB,EASlBA,iBAEF0C,EAXoB,OAcQ+B,mBAAS,GAdjB,mBAcfoB,EAde,KAcNC,EAdM,OAe2BnE,qBAAW,SAACxB,EAAO4F,GAClE,MAAM,GAAN,mBAAW5F,GAAX,CAAkB4F,KACjB,IAjBmB,mBAefC,EAfe,KAeCC,EAfD,OAkBcxB,mBAAS,IAlBvB,mBAkBfyB,EAlBe,KAkBHC,EAlBG,OAmBiBxE,qBAAW,SAACxB,EAAO4F,GACxD,OAAO,KACF5F,EADL,GAEK4F,IAEJ,IAxBmB,mBAmBfK,EAnBe,KAmBJC,EAnBI,KA2BhBxC,EAAWyC,kBAAQ,WAIvB,MAAO,CAAExC,WAFPvE,IAAYuC,EAAS5D,MAAME,aAC3BuB,IAASmC,EAASxD,aAAaC,QAEhC,CAACgB,EAASI,IAGb4G,EAAkB1G,EAAYC,EAAa4C,GAG3C,IAAM8D,EAAYxD,sBAAY,WAC5BvC,QAAQC,IAAI,mBAAoB0F,GAChC,IAAMK,EAAI,IAAIC,IAAJ,GACRC,WAAW,EACXhD,OAAQ/D,IAAwB,GAC7BwG,IAOLK,EAAEf,GAAG,SAJiB,SAAAD,GAEpBQ,EADsBR,KAKxBK,EAAW,GACXpD,EAAS,CACP/B,KAAMmB,EAASrD,QAAQM,iBACvBsC,MAAOoF,KAER,CAAC/D,EAAU9C,EAAWwG,IAGzBzD,oBAAU,WACR,IAAMiE,EAAO,gBAAYpH,EAAZ,WACPqH,EAAY7G,EAAiB8G,IAAIF,GAEjCG,EAA2B,SAAA1F,GAAU,IACjCoE,GAASpE,EAAM0E,OAAS,IAAxBN,KACJA,IACFU,EAAcV,GACdpC,gBAAM,CACJC,QAAS,8BACT3C,KAAM,UACN4C,QAAS,CAAEC,GAAI,SAAUC,IAAK,eAMpC,OADAoD,EAAUnB,GAAG,QAASqB,GACf,WACLF,EAAUlB,IAAI,QAASoB,KAExB,CAACvH,EAAQQ,EAAkBmG,IAG9B,IAAMa,EAAehE,sBAAY,WAC/B,IACEvC,QAAQC,IAAI,gBAAiBwF,GAC7B,IAAMe,EAAMnC,KAAKC,MAAMmB,GACvB,IAAKhE,MAAMC,QAAQ8E,GAAM,MAAM,IAAIC,MAAM,6BAEzCD,EAAIlG,QAAQ,SAAAoG,GAAG,OAAItH,EAAWuH,OAAOD,KACrC,MAAOhC,GACP1E,QAAQ0E,MAAMA,KAEf,CAACe,EAAYrG,IAGVwH,EAAwBrE,sBAAY,WACxC,IA1GkByC,EA0GZ6B,EAAoBxC,KAAKyC,UAAUvB,GA1GvBP,EA2GJ6B,EA1GhBE,IAAK/B,GACLpC,gBAAM,CACJC,QAAS,8BACT3C,KAAM,UACN4C,QAAS,CAAEC,GAAI,SAAUC,IAAK,aAwG9B,IAAMmD,EAAO,gBAAYpH,EAAZ,eACbQ,EAAiB8G,IAAIF,GAASa,IAAI,CAAEhC,KAAM6B,KACzC,CAACtB,EAAgBxG,EAAQQ,IAEtB0H,EAAoB1E,sBACxB,SAAA+C,GACEM,EAAkBN,IAEpB,CAACM,IAGH,OACE,6BAAcxC,EACZ,kBAAC8D,EAAD,CAAc3D,SAAU0D,IACxB,yBAAK3D,UAAU,SACb,2BAAOA,UAAU,SAAjB,mBACmB,IACjB,uBACEA,UAAU,6BACVK,QAASiD,GAET,uBAAGtD,UAAU,uBAGjB,yBACEA,UAAW,CAAC,UAAWiC,EAAiB,GAAK,cAAchB,KAAK,MAEhE,8BACEjB,UAAW,CAAC,WAAY,YAAYiB,KAAK,KACzC4C,UAAQ,EACRvG,MAAOyD,KAAKyC,UAAUvB,OAIf,IAAZH,GACC,yBAAK9B,UAAU,SACb,4BAAQA,UAAU,oBAAoBK,QAASoC,GAA/C,aAKHX,GAAW,GACV,kBAAC,IAAMzD,SAAP,KACE,yBAAK2B,UAAU,SACb,2BAAOA,UAAU,SAAjB,UACA,yBAAKA,UAAW,CAAC,WAAWiB,KAAK,MAC/B,8BACEjB,UAAW,CAAC,WAAY,YAAYiB,KAAK,KACzC3D,MAAO6E,EACPlC,SAAU,SAAAC,GAAC,OAAIkC,EAAclC,EAAEC,OAAO7C,YAI5C,yBAAK0C,UAAU,SACb,4BAAQA,UAAU,oBAAoBK,QAAS4C,GAA/C,e,mjBCnKZ,IASe,WAAApB,GAAU,IAAD,EAYlBhE,IAZkB,0BAGlBrC,EAHkB,EAGlBA,QACAI,EAJkB,EAIlBA,KACAC,EALkB,EAKlBA,UACAJ,EANkB,EAMlBA,OACAK,EAPkB,EAOlBA,WACAC,EARkB,EAQlBA,YACAE,EATkB,EASlBA,iBAEF0C,EAXoB,OAcQ+B,mBAAS,GAdjB,mBAcfoB,EAde,KAcNC,EAdM,OAewBrB,mBAAS,IAfjC,mBAefoD,EAfe,KAeEC,EAfF,OAgBuBnG,qBAAW,SAACxB,EAAO4F,GAC9D,MAAM,GAAN,mBAAW5F,GAAX,CAAkB4F,KACjB,IAlBmB,mBAgBfgC,EAhBe,KAgBDC,EAhBC,OAmBiBrG,qBAAW,SAACxB,EAAO4F,GACxD,OAAO,KACF5F,EADL,GAEK4F,IAEJ,IAxBmB,mBAmBfK,EAnBe,KAmBJC,EAnBI,KA0BhBxC,EAAWyC,kBAAQ,WAIvB,MAAO,CAAExC,WAFPvE,IAAYuC,EAAS5D,MAAME,aAC3BuB,IAASmC,EAASxD,aAAaE,QAEhC,CAACe,EAASI,IAGb4G,EAAkB1G,EAAYC,EAAa4C,GAG3CC,oBAAU,WACR,IAAMiE,EAAO,gBAAYpH,EAAZ,eACPyI,EAAgBjI,EAAiB8G,IAAIF,GAErCsB,EAA+B,SAAA7G,GACnCZ,QAAQC,IAAI,OAAQW,GADwB,IAEpCoE,GAASpE,EAAM0E,OAAS,IAAxBN,KACJA,IACFqC,EAAmBrC,GACnBpC,gBAAM,CACJC,QAAS,4BACT3C,KAAM,UACN4C,QAAS,CAAEC,GAAI,SAAUC,IAAK,eAMpC,OADAwE,EAAcvC,GAAG,QAASwC,GACnB,WACLD,EAActC,IAAI,QAASuC,KAE5B,CAAC1I,EAAQQ,EAAkB8H,IAG9B,IAAMK,EAAYnF,sBAAY,WAC5BvC,QAAQC,IAAI,mBAAoB0F,GAChC3F,QAAQC,IAAI,iBAAkBmH,GAC9B,IAAMpB,EAAI,IAAIC,IAAJ,GACRC,WAAW,EACXhD,OAAQ/D,IAAwB,GAC7BwG,IAOLK,EAAEf,GAAG,SAJiB,SAAAD,GAEpBuC,EADsBvC,KAKxB,IACE,IAAMwB,EAAMnC,KAAKC,MAAM8C,GACvB,IAAK3F,MAAMC,QAAQ8E,GAAM,MAAM,IAAIC,MAAM,6BAEzCD,EAAIlG,QAAQ,SAAAoG,GAAG,OAAIV,EAAEW,OAAOD,KAE5BrB,EAAW,GACXpD,EAAS,CACP/B,KAAMmB,EAASrD,QAAQM,iBACvBsC,MAAOoF,IAET,MAAOtB,GACP1E,QAAQ0E,MAAMA,KAEf,CACD0C,EACAG,EACAlC,EACApD,EACA9C,EACAwG,IAGIgC,EAA0BpF,sBAAY,WAC1C,IA7GkByC,EA6GZ4C,EAAYvD,KAAKyC,UAAUQ,GA7GftC,EA8GJ4C,EA7GhBb,IAAK/B,GACLpC,gBAAM,CACJC,QAAS,8BACT3C,KAAM,UACN4C,QAAS,CAAEC,GAAI,SAAUC,IAAK,aA2G9B,IAAMmD,EAAO,gBAAYpH,EAAZ,WACbQ,EAAiB8G,IAAIF,GAASa,IAAI,CAAEhC,KAAM4C,KACzC,CAACN,EAAc/H,EAAkBR,IAE9BkI,EAAoB1E,sBACxB,SAAA+C,GACEM,EAAkBN,IAEpB,CAACM,IAGH,OACE,6BAAcxC,EACZ,kBAAC8D,EAAD,CAAc3D,SAAU0D,IACxB,yBAAK3D,UAAU,SACb,2BAAOA,UAAU,SAAjB,wBACA,yBAAKA,UAAW,CAAC,WAAWiB,KAAK,MAC/B,8BACEjB,UAAW,CAAC,WAAY,YAAYiB,KAAK,KACzC3D,MAAOwG,EACP7D,SAAU,SAAAC,GAAC,OAAI6D,EAAmB7D,EAAEC,OAAO7C,YAIpC,IAAZwE,GACC,yBAAK9B,UAAU,SACb,4BAAQA,UAAU,oBAAoBK,QAAS+D,GAA/C,YAKS,IAAZtC,GACC,yBAAK9B,UAAU,SACb,2BAAOA,UAAU,SAAjB,iBACiB,IACf,uBACEA,UAAU,6BACVK,QAASgE,GAET,uBAAGrE,UAAU,uBAGjB,yBAAKA,UAAW,CAAC,WAAWiB,KAAK,MAC/B,8BACEjB,UAAW,CAAC,WAAY,YAAYiB,KAAK,KACzC4C,UAAQ,EACRvG,MAAOyD,KAAKyC,UAAUQ,SC3K9BO,EAAY,CAChBC,WAAY,UACZC,UAAW,aACXrD,MAAO,YACPsD,aAAc,cAGD,cAAqC,EAAlCjG,aAAkC,EAAhBC,KAAiB,IAAD,EACxBb,IAAjB9B,EADyC,oBACzCA,YADyC,EAEtB2E,mBAAS,cAFa,mBAE3CiE,EAF2C,KAEnCC,EAFmC,KAWlD,OAPAhG,oBAAU,WACR,IAAMiG,EAAiB,SAAAF,GAAM,OAAIC,EAAUD,IAC3C5I,EAAY4F,GAAG,UAAW,SAAAzB,GAAC,OAAI2E,EAAe,eAC9C9I,EAAY4F,GAAG,QAAS,SAAAzB,GAAC,OAAI2E,EAAe,kBAC5C9I,EAAY4F,GAAG,QAAS,SAAAzB,GAAC,OAAI2E,EAAe,YAC3C,CAAC9I,IAGF,6BAASiE,UAAW,CAAC,UAAWuE,EAAUI,IAAS1D,KAAK,MACtD,yBAAKjB,UAAU,gBACb,uBAAGA,UAAU,kBAAkB2E,M,QCrBxB,cAAqC,EAAlClG,aAAkC,EAAhBC,KAAiB,IAAD,EACZb,IADY,sBACzC9B,EADyC,EACzCA,YAAaD,EAD4B,EAC5BA,WAD4B,EAE1B4E,mBAAS,IAFiB,mBAE3CoE,EAF2C,KAErCC,EAFqC,OAGlBrE,mBAAS,IAHS,mBAG3CsE,EAH2C,KAGjCC,EAHiC,KA2DlD,OArDArG,oBAAU,WACR,GAAK9C,EAAL,CACA,IAAMoJ,EAAiBC,YAAY,WACjC,IACE,IAAKrJ,EAAY,OAAOsJ,cAAcF,GACtCpJ,EAAWuJ,SAAS,SAACxF,GAAqB,IAAhByF,EAAe,uDAAP,GAChCL,EACEK,EAAMC,IAAI,kBAAyC,CACjD3I,KADQ,EAAGA,KAEX4I,GAFQ,EAASA,GAGjBC,UAHQ,EAAaA,UAIrBC,OAJQ,+CAQd,MAAOtE,MACR,KACH,OAAO,kBAAMgE,cAAcF,MAC1B,CAACpJ,IAGJ8C,oBAAU,WACR,IAAM+G,EAAS,SAAAC,GAAG,OAAI,WACpBb,EAAQ,GAAD,mBACFD,GADE,CAEL,CACEe,MAAO,IAAInK,KACXoK,QAASF,QAITG,EAAgBJ,EAAO,aACvBK,EAAcL,EAAO,SACrBM,EAAcN,EAAO,gBAGrBO,EAAiB,SAAAN,GAAG,OAAID,EAAO,WAAD,OAAYC,GAAlBD,IAS9B,OAPA5J,EAAY4F,GAAG,UAAWoE,GAC1BhK,EAAY4F,GAAG,QAASqE,GACxBjK,EAAY4F,GAAG,OAAQuE,GACvBnK,EAAY4F,GAAG,QAASsE,GAExBlK,EAAY4F,GAAG,mBARQ,SAAAwE,GAAO,OAAIR,EAAO,WAAD,OAAYQ,GAAlBR,KAU3B,WACL5J,EAAY6F,IAAI,UAAWmE,GAC3BhK,EAAY6F,IAAI,QAASoE,GACzBjK,EAAY6F,IAAI,OAAQsE,GACxBnK,EAAY6F,IAAI,QAASqE,KAE1B,CAACnB,EAAMC,EAAShJ,IAGjB,yBAAKiE,UAAU,kBACb,iDAAuBgF,EAASoB,QAChC,yBACEpG,UAAU,+CACVO,MAAO,CACL8F,UAAW,OACXC,UAAW,OACXC,UAAW,OACXC,QAAS,aAGVxB,EAASO,IAAI,WAAkCkB,GAAlC,IAAG7J,EAAH,EAAGA,KAAM4I,EAAT,EAASA,GAAeE,GAAxB,EAAaD,UAAb,EAAwBC,QAAxB,OACZ,yBAAK1F,UAAU,UAAU0G,IAAKlB,GAC5B,2BACGiB,EADH,WACiB,gCAASE,OAAO/J,IADjC,UACwD+J,OAAOnB,IAE/D,4BACGoB,OAAOC,KAAKnB,GAAQH,IAAI,SAACmB,EAAKD,GAAN,OACvB,wBAAIC,IAAKD,GACNE,OAAOD,GADV,KACkBC,OAAOjB,EAAOgB,YAO1C,6BACA,yBACE1G,UAAU,kDACVO,MAAO,CACL8F,UAAW,OACXC,UAAW,OACXC,UAAW,OACXC,QAAS,aAGV1B,EAAKS,IAAI,WAAqBkB,GAArB,IAAGX,EAAH,EAAGA,QAASD,EAAZ,EAAYA,MAAZ,OACR,uBAAGa,IAAKD,GACLE,OAAOd,GADV,MACqBc,OAAOb,SClGvB,cAAqC,EAAlCrH,aAAkC,EAAhBC,KAAiB,IAAD,EACZb,IADY,sBACzC9B,EADyC,EACzCA,YAAaD,EAD4B,EAC5BA,WAD4B,EAEtB4E,oBAAS,GAFa,mBAE3CoG,EAF2C,KAEnCC,EAFmC,OAGlBrG,mBAAS,IAHS,mBAG3CsG,EAH2C,KAGjCC,EAHiC,KAKlDrI,oBAAU,WACR,IAAMmH,EAAgB,kBAAMgB,GAAU,IAChCd,EAAc,kBAAMc,GAAU,IAKpC,OAHAhL,EAAY4F,GAAG,UAAWoE,GAC1BhK,EAAY4F,GAAG,QAASsE,GAEjB,WACLlK,EAAY6F,IAAI,UAAWmE,GAC3BhK,EAAY6F,IAAI,QAASqE,KAE1B,CAAClK,EAAagL,IAEjB,IAAMG,EAAsBjI,sBAAY,SAAA+C,GAAG,OAAIiF,EAAYjF,IAAM,CAC/DiF,IAGIE,EAAgBlI,sBAAY,WAChCnD,EAAWsL,KAAKJ,GAChBjL,EAAYuF,KAAK,mBAAoB0F,GACrCE,EAAoB,KACnB,CAACF,EAAUlL,EAAYC,EAAamL,IAEvC,OACE,8BAAUnH,UAAW+G,GACnB,yBAAK9G,UAAU,WACb,yBAAKA,UAAU,gBACb,2BACEA,UAAU,QACVpD,KAAK,OACLwD,YAAY,kBACZ9C,MAAO0J,EACP/G,SAAU,SAAAC,GAAC,OAAIgH,EAAoBhH,EAAEC,OAAO7C,QAC5C+J,WAAY,SAAAnH,GACLA,IAAGA,EAAI3D,OAAO+K,OACnB,IAAIC,EAAUrH,EAAEqH,SAAWrH,EAAEsH,MAC7B,GAAwB,OAApBb,OAAOY,GAET,OADAJ,EAAcjH,EAAEC,OAAO7C,QAChB,MAKf,yBAAK0C,UAAU,UACb,4BAAQA,UAAU,iBAAiBK,QAAS8G,GAA5C,YCnDK,cAAiB,IAAdvH,EAAa,EAAbA,OACV6H,EAAWC,iBAAO,MAWxB,OAVA9I,oBAAU,WACR,GAAK6I,EAASE,SAAY/H,EAA1B,CACA,IAAMpB,EAAQiJ,EAASE,QACnB,cAAenJ,EACjBA,EAAMoJ,UAAYhI,EAElBpB,EAAMqJ,IAAMtL,OAAOuL,IAAIC,gBAAgBnI,GAEzCpB,EAAMwJ,SACL,CAACpI,IAEF,oCACE,2BAAOmD,IAAK0E,MCVH,WAAA5F,GAAU,IAAD,EACchE,IADd,sBACbhC,EADa,EACbA,UAAWC,EADE,EACFA,WADE,EAEgB4E,mBAAS,MAFzB,mBAEfuH,EAFe,KAEFC,EAFE,KAsBtB,OAjBAtJ,oBAAU,WACR,GAAK9C,EAAL,CACA,IAAMqM,EAAiB,SAAAvI,GACrBN,gBAAM,CACJC,QAAQ,uBACR3C,KAAM,UACN4C,QAAS,CAAEC,GAAI,SAAUC,IAAK,aAEhCwI,EAAetI,IAGjB,OADA9D,EAAW6F,GAAG,SAAUwG,GACjB,WACLD,EAAe,MACfpM,EAAW8F,IAAI,SAAUuG,MAE1B,CAACrM,EAAYoM,IAGd,kCACE,yBAAKlI,UAAU,oCACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,eACb,iCACA,kBAACoI,EAAD,CAAaxI,OAAQ/D,KAEvB,yBAAKmE,UAAU,eACb,oCACA,kBAACoI,EAAD,CAAaxI,OAAQqI,UCjCpB,cAAgC,EAA7BI,aAA8B,IAAhB3K,EAAe,EAAfA,SAAe,EACPG,IADO,mBACpCtC,EADoC,KACpCA,cAAiBoD,EADmB,OAEb+B,oBAAS,GAFI,mBAEtC4H,EAFsC,KAE5BC,EAF4B,KAc7C,OAVA3J,oBAAU,WACRxB,IAAUoL,KAAK,WACb7J,EAAS,CACP/B,KAAMmB,EAASrD,QAAQO,oBACvBqC,MAAOF,IAAUC,oBAEnBkL,GAAY,MAEb,CAAC5J,IAGF,kBAAC,IAAMN,SAAP,KACGiK,EAAW,KAAO/M,GAAiBkN,IAAKC,eACvChL,EAEA,6BAASiL,MAAM,qBACb,yBAAKA,MAAM,gBAAX,mCCtBK,cAAiC,IAA9BN,EAA6B,EAA7BA,aAAc3K,EAAe,EAAfA,SAAe,EAC1BG,IAAVjC,EADoC,oBACpCA,KAET,OACE,kBAAC,IAAMyC,SAAP,KAAiBgK,IAAiBzM,EAAO8B,EAAW,OC+DzCkL,MA1Df,WACE,OACE,kBAAC,EAAD,KACE,6BAAS5I,UAAU,YACjB,yBAAKA,UAAU,aACb,6BAASA,UAAU,QACjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,SAAd,yBAIN,kBAAC6I,EAAD,KACE,uBAAG7I,UAAU,+BAAb,gBACA,yBAAKA,UAAU,UACb,yBAAKA,UAAU,OACb,kBAAC8I,EAAD,QAIJ,kBAACC,EAAD,CAAeV,aAActK,EAASxD,aAAaC,MACjD,yBAAKwF,UAAU,UACb,yBAAKA,UAAU,OACb,kBAACgJ,EAAD,SAKN,kBAACD,EAAD,CAAeV,aAActK,EAASxD,aAAaE,MACjD,yBAAKuF,UAAU,UACb,yBAAKA,UAAU,OACb,kBAACiJ,EAAD,SAKN,yBAAKjJ,UAAU,UACb,kBAACkJ,EAAD,OAGF,yBAAKlJ,UAAU,uBACb,yBAAKA,UAAU,OACb,kBAACmJ,EAAD,OAEF,yBAAKnJ,UAAU,OACb,kBAACoJ,EAAD,OAEF,yBAAKpJ,UAAU,OACb,kBAACqJ,EAAD,aChDIC,QACW,cAA7B/M,OAAOgN,SAASC,UAEe,UAA7BjN,OAAOgN,SAASC,UAEhBjN,OAAOgN,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBxK,WACrBA,UAAUyK,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d8586ace.chunk.js","sourcesContent":["export const ESTEP = {\n  CHOICE_MODE: 'CHOICE_MODE',\n  NOT_CONNECT: 'NOT_CONNECT',\n  CONNECTED: 'CONNECTED'\n}\nexport const ECLIENT_MODE = {\n  HOST: 'HOST',\n  PEER: 'PEER'\n}\nexport const EACTION = {\n  reset: 'reset',\n  setAppStep: 'setAppStep',\n  setRoomId: 'setRoomId',\n  setAppMode: 'setAppMode',\n  setMineMedia: 'setMineMedia',\n  updateConenction: 'updateConenction',\n  updateWebRTCSupport: 'updateWebRTCSupport'\n}\n","import { EventEmitter } from 'events'\nimport DetectRTC from 'detectrtc'\nimport Firebase from 'firebase/app'\nimport 'firebase/database'\n\nimport { ESTEP, EACTION } from './constant'\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyBe719lkdeQBL0McXykgBMUClMUN3UgpUQ',\n  databaseURL: 'https://weeklyhack-ff068.firebaseio.com/'\n}\nFirebase.initializeApp(firebaseConfig)\n\nexport const initialState = {\n  supportWebRTC: false,\n  appStep: ESTEP.CHOICE_MODE,\n  roomId: `room-${Date.now()}`,\n  mode: '',\n  mineMedia: null,\n  connection: null,\n  eventSource: new EventEmitter(),\n  firebaseDatabase: Firebase.database()\n}\n\nconst mainReducer = (state, action) => {\n  console.log('action', action)\n  switch (action.type) {\n    case EACTION.reset:\n      const previousMedia = state.mineMedia\n      const previousConnection = state.connection\n      if (previousMedia) {\n        previousMedia.getTracks().forEach(track => track.stop())\n      }\n      if (previousConnection) {\n        previousConnection.destroy && previousConnection.destroy()\n      }\n      return {\n        ...initialState,\n        eventSource: new EventEmitter(),\n        supportWebRTC: DetectRTC.isWebRTCSupported\n      }\n    case EACTION.updateWebRTCSupport:\n      return {\n        ...state,\n        supportWebRTC: action.value\n      }\n    case EACTION.setAppMode:\n      return {\n        ...state,\n        mode: action.value\n      }\n    case EACTION.setRoomId:\n      return {\n        ...state,\n        roomId: action.value\n      }\n    case EACTION.setAppStep:\n      return {\n        ...state,\n        appStep: action.value\n      }\n    case EACTION.setMineMedia:\n      return {\n        ...state,\n        mineMedia: action.value\n      }\n    case EACTION.updateConenction:\n      return {\n        ...state,\n        connection: action.value\n      }\n    default:\n      return state\n  }\n}\n\nconst debugDev = reducer => (state, action) => {\n  const newState = reducer(state, action)\n  window.store = newState\n  return newState\n}\n\nexport const reducer = debugDev(mainReducer)\n","import React, { createContext, useContext, useReducer } from 'react'\nimport { initialState, reducer } from './stores/appStore'\nimport * as ECONSTANT from './stores/constant'\n\nexport const StateContext = createContext()\nexport const StateProvider = ({ children }) => (\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </StateContext.Provider>\n)\nexport const useStateValue = () => useContext(StateContext)\nexport const CONSTANT = ECONSTANT\n","import React from 'react'\nimport { useStateValue } from '../AppContext'\n\nexport default ({ expectedAppStep, children }) => {\n  const [{ appStep }] = useStateValue()\n  const check = Array.isArray(expectedAppStep)\n    ? expectedAppStep\n    : [expectedAppStep]\n  return (\n    <React.Fragment>{check.includes(appStep) ? children : null}</React.Fragment>\n  )\n}\n","import React, { useCallback, useEffect } from 'react'\nimport DisplayIfStep from '../containers/DisplayIfStep'\nimport { useStateValue, CONSTANT } from '../AppContext'\nimport { toast } from 'bulma-toast'\n\nconst MediaOptions = { video: true }\n\nexport default ({ defaultIndex = 0, tabs = [] }) => {\n  const [{ appStep, mode, roomId, connection }, dispatch] = useStateValue()\n\n  useEffect(() => {\n    const pageUnload = () => {\n      dispatch({\n        type: CONSTANT.EACTION.reset\n      })\n    }\n    window.addEventListener('beforeunload', pageUnload, false)\n    return () => {\n      window.removeEventListener('beforeunload', pageUnload)\n    }\n  }, [dispatch, connection])\n\n  // Set app mode\n  const setMode = useCallback(\n    mode => {\n      dispatch({\n        type: CONSTANT.EACTION.setAppMode,\n        value: mode\n      })\n      dispatch({\n        type: CONSTANT.EACTION.setAppStep,\n        value: CONSTANT.ESTEP.NOT_CONNECT\n      })\n    },\n    [dispatch]\n  )\n\n  const onReset = useCallback(() => {\n    connection && connection.destroy && connection.destroy()\n    dispatch({\n      type: CONSTANT.EACTION.reset\n    })\n  }, [dispatch, connection])\n\n  // Set room Id\n  const updateRoomId = useCallback(\n    roomId => {\n      dispatch({\n        type: CONSTANT.EACTION.setRoomId,\n        value: roomId\n      })\n    },\n    [dispatch]\n  )\n\n  // Gather Media\n  const onGatherVideoCallback = useCallback(() => {\n    const gotMedia = stream => {\n      dispatch({\n        type: CONSTANT.EACTION.setMineMedia,\n        value: stream\n      })\n    }\n    if (!navigator) {\n      return toast({\n        message: `error - navigator not support`,\n        type: 'is-error',\n        animate: { in: 'fadeIn', out: 'fadeOut' }\n      })\n    }\n    // get video/voice stream\n    navigator.getUserMedia(MediaOptions, gotMedia, err => {\n      toast({\n        message: `error - ${err.message}`,\n        type: 'is-error',\n        animate: { in: 'fadeIn', out: 'fadeOut' }\n      })\n    })\n  }, [dispatch])\n\n  const stepLock =\n    appStep === CONSTANT.ESTEP.CHOICE_MODE\n      ? { disabled: false }\n      : { disabled: true }\n\n  return (\n    <div className=\"columns is-multiline is-centered\">\n      <div className=\"column is-6\">\n        <fieldset {...stepLock}>\n          <input\n            className=\"input is-rounded\"\n            type=\"text\"\n            value={roomId}\n            onChange={e => updateRoomId(e.target.value)}\n            placeholder=\"Room Id\"\n          />\n        </fieldset>\n      </div>\n      <div className=\"column is-full\">\n        <fieldset {...stepLock}>\n          <div className=\"field is-grouped is-grouped-centered\">\n            <button\n              className=\"button is-success\"\n              onClick={onGatherVideoCallback}\n            >\n              With Media\n            </button>\n          </div>\n        </fieldset>\n      </div>\n      <div className=\"column is-full\">\n        <fieldset {...stepLock}>\n          <div className=\"field is-grouped is-grouped-centered\">\n            <label className=\"radio\">\n              <input\n                type=\"radio\"\n                checked={mode === CONSTANT.ECLIENT_MODE.HOST}\n                onChange={e => setMode(CONSTANT.ECLIENT_MODE.HOST)}\n              />\n              <span style={{ margin: 5 }}>Host</span>\n            </label>\n            <label className=\"radio\">\n              <input\n                type=\"radio\"\n                checked={mode === CONSTANT.ECLIENT_MODE.PEER}\n                onChange={e => setMode(CONSTANT.ECLIENT_MODE.PEER)}\n              />\n              <span style={{ margin: 5 }}>Peer</span>\n            </label>\n          </div>\n        </fieldset>\n      </div>\n      <div className=\"column\">\n        <div className=\"field is-grouped is-grouped-centered\">\n          <DisplayIfStep\n            expectedAppStep={[\n              CONSTANT.ESTEP.CONNECTED,\n              CONSTANT.ESTEP.NOT_CONNECT\n            ]}\n          >\n            <button className=\"button is-warning\" onClick={onReset}>\n              Reset\n            </button>\n          </DisplayIfStep>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\n\nexport default ({ onChange }) => {\n  const [configJson, setConfig] = useState(`{\n    \"trickle\": true,\n    \"config\": {\n      \"iceServers\": [ { \"urls\": \"stun:stun.l.google.com:19302\" }, { \"urls\": \"stun:global.stun.twilio.com:3478?transport=udp\" } ]\n    }\n  }`)\n  const [isCorrect, setIsCorrect] = useState(true)\n\n  // Init value\n  useEffect(() => {\n    onChange && onChange(JSON.parse(configJson))\n  }, [])\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\">\n        STUN/TURN config{' '}\n        <span\n          className={[\n            'icon',\n            isCorrect ? 'has-text-success' : 'has-text-danger'\n          ].join(' ')}\n        >\n          <i\n            className={['fas', isCorrect ? 'fa-check' : 'fa-ban'].join(' ')}\n          ></i>\n        </span>\n      </label>\n      <div className={['control'].join(' ')}>\n        <textarea\n          className={['textarea', 'is-small'].join(' ')}\n          defaultValue={configJson}\n          onChange={e => {\n            try {\n              setConfig(e.target.value)\n              const newVal = JSON.parse(e.target.value)\n              onChange && onChange(newVal)\n              setIsCorrect(true)\n            } catch (error) {\n              setIsCorrect(false)\n            }\n          }}\n        />\n      </div>\n    </div>\n  )\n}\n","import { useEffect } from 'react'\nimport { CONSTANT } from '../AppContext'\n\nexport default (connection, eventSource, dispatch) => {\n  useEffect(() => {\n    if (!connection) return\n\n    const errorHandler = err => eventSource.emit('error', err)\n    const connectHandler = () => {\n      eventSource.emit('connect')\n      dispatch({\n        type: CONSTANT.EACTION.setAppStep,\n        value: CONSTANT.ESTEP.CONNECTED\n      })\n    }\n    const closeHandler = () => {\n      eventSource.emit('close')\n      dispatch({\n        type: CONSTANT.EACTION.setAppStep,\n        value: CONSTANT.ESTEP.NOT_CONNECT\n      })\n    }\n    const dataHandler = data => eventSource.emit('data', data)\n\n    connection.on('error', errorHandler)\n    connection.on('connect', connectHandler)\n    connection.on('data', dataHandler)\n    connection.on('close', closeHandler)\n    connection.on('stream', stream => console.log('stream', stream))\n\n    return () => {\n      connection.off('error', errorHandler)\n      connection.off('connect', connectHandler)\n      connection.off('data', dataHandler)\n      connection.off('close', closeHandler)\n    }\n  }, [connection, eventSource, dispatch])\n}\n","import React, {\n  useCallback,\n  useMemo,\n  useReducer,\n  useState,\n  useEffect\n} from 'react'\nimport SimplePeer from 'simple-peer'\nimport { toast } from 'bulma-toast'\nimport copy from 'copy-to-clipboard'\n\nimport WebRtcConfig from './WebRtcConfig'\n\nimport { useStateValue, CONSTANT } from '../AppContext'\nimport connectionMonitor from '../utils/connectionMonitor'\n\nconst copyClipboard = data => {\n  copy(data)\n  toast({\n    message: 'copied - sync with firebase',\n    type: 'is-info',\n    animate: { in: 'fadeIn', out: 'fadeOut' }\n  })\n}\n\nexport default props => {\n  const [\n    {\n      appStep,\n      roomId,\n      mode,\n      mineMedia,\n      connection,\n      eventSource,\n      firebaseDatabase\n    },\n    dispatch\n  ] = useStateValue()\n\n  const [subStep, setSubStep] = useState(1)\n  const [hostSignalData, dispatchHostSignalData] = useReducer((state, val) => {\n    return [...state, val]\n  }, [])\n  const [hostAnswer, setHostAnswer] = useState('')\n  const [rtcConfig, dispatchRtcConfig] = useReducer((state, val) => {\n    return {\n      ...state,\n      ...val\n    }\n  }, {})\n\n  // Compute stepLock\n  const stepLock = useMemo(() => {\n    const isEnable =\n      appStep === CONSTANT.ESTEP.NOT_CONNECT &&\n      mode === CONSTANT.ECLIENT_MODE.HOST\n    return { disabled: !isEnable }\n  }, [appStep, mode])\n\n  // Effect\n  connectionMonitor(connection, eventSource, dispatch)\n\n  // UI Callback\n  const createNew = useCallback(() => {\n    console.log('Create peer with', rtcConfig)\n    const p = new SimplePeer({\n      initiator: true,\n      stream: mineMedia ? mineMedia : false,\n      ...rtcConfig\n    })\n\n    const signalHandler = data => {\n      const newSignalData = data\n      dispatchHostSignalData(newSignalData)\n    }\n    p.on('signal', signalHandler)\n\n    setSubStep(2)\n    dispatch({\n      type: CONSTANT.EACTION.updateConenction,\n      value: p\n    })\n  }, [dispatch, mineMedia, rtcConfig])\n\n  // Effect - update answer from firebase\n  useEffect(() => {\n    const roomRef = `/room/${roomId}/answer`\n    const answerRef = firebaseDatabase.ref(roomRef)\n\n    const updateAnswerFromFirebase = value => {\n      const { data } = value.val() || {}\n      if (data) {\n        setHostAnswer(data)\n        toast({\n          message: 'answer - sync from firebase',\n          type: 'is-info',\n          animate: { in: 'fadeIn', out: 'fadeOut' }\n        })\n      }\n    }\n\n    answerRef.on('value', updateAnswerFromFirebase)\n    return () => {\n      answerRef.off('value', updateAnswerFromFirebase)\n    }\n  }, [roomId, firebaseDatabase, setHostAnswer])\n\n  // Submit answer\n  const submitAnswer = useCallback(() => {\n    try {\n      console.log('submit answer', hostAnswer)\n      const arr = JSON.parse(hostAnswer)\n      if (!Array.isArray(arr)) throw new Error('Input signal must be aray')\n\n      arr.forEach(itm => connection.signal(itm))\n    } catch (error) {\n      console.error(error)\n    }\n  }, [hostAnswer, connection])\n\n  // Copy to clipboard\n  const copyHostDataClipboard = useCallback(() => {\n    const hostSignalDataStr = JSON.stringify(hostSignalData)\n    copyClipboard(hostSignalDataStr)\n\n    const roomRef = `/room/${roomId}/hostSignal`\n    firebaseDatabase.ref(roomRef).set({ data: hostSignalDataStr })\n  }, [hostSignalData, roomId, firebaseDatabase])\n\n  const onRtcConfigChange = useCallback(\n    val => {\n      dispatchRtcConfig(val)\n    },\n    [dispatchRtcConfig]\n  )\n\n  return (\n    <fieldset {...stepLock}>\n      <WebRtcConfig onChange={onRtcConfigChange} />\n      <div className=\"field\">\n        <label className=\"label\">\n          Host Signal Data{' '}\n          <a\n            className=\"button is-rounded is-small\"\n            onClick={copyHostDataClipboard}\n          >\n            <i className=\"far fa-clipboard\" />\n          </a>\n        </label>\n        <div\n          className={['control', hostSignalData ? '' : 'is-loading'].join(' ')}\n        >\n          <textarea\n            className={['textarea', 'is-small'].join(' ')}\n            readOnly\n            value={JSON.stringify(hostSignalData)}\n          ></textarea>\n        </div>\n      </div>\n      {subStep === 1 && (\n        <div className=\"field\">\n          <button className=\"button is-primary\" onClick={createNew}>\n            Generate\n          </button>\n        </div>\n      )}\n      {subStep >= 2 && (\n        <React.Fragment>\n          <div className=\"field\">\n            <label className=\"label\">Answer</label>\n            <div className={['control'].join(' ')}>\n              <textarea\n                className={['textarea', 'is-small'].join(' ')}\n                value={hostAnswer}\n                onChange={e => setHostAnswer(e.target.value)}\n              ></textarea>\n            </div>\n          </div>\n          <div className=\"field\">\n            <button className=\"button is-primary\" onClick={submitAnswer}>\n              Connect\n            </button>\n          </div>\n        </React.Fragment>\n      )}\n    </fieldset>\n  )\n}\n","import React, {\n  useCallback,\n  useState,\n  useMemo,\n  useReducer,\n  useEffect\n} from 'react'\nimport SimplePeer from 'simple-peer'\nimport { toast } from 'bulma-toast'\nimport copy from 'copy-to-clipboard'\n\nimport WebRtcConfig from './WebRtcConfig'\n\nimport { useStateValue, CONSTANT } from '../AppContext'\nimport connectionMonitor from '../utils/connectionMonitor'\n\nconst copyClipboard = data => {\n  copy(data)\n  toast({\n    message: 'copied - sync with firebase',\n    type: 'is-info',\n    animate: { in: 'fadeIn', out: 'fadeOut' }\n  })\n}\n\nexport default props => {\n  const [\n    {\n      appStep,\n      mode,\n      mineMedia,\n      roomId,\n      connection,\n      eventSource,\n      firebaseDatabase\n    },\n    dispatch\n  ] = useStateValue()\n\n  const [subStep, setSubStep] = useState(1)\n  const [inputSignalData, setInputSignalData] = useState('')\n  const [answerToHost, dispatchAnswerToHost] = useReducer((state, val) => {\n    return [...state, val]\n  }, [])\n  const [rtcConfig, dispatchRtcConfig] = useReducer((state, val) => {\n    return {\n      ...state,\n      ...val\n    }\n  }, {})\n\n  const stepLock = useMemo(() => {\n    const isEnable =\n      appStep === CONSTANT.ESTEP.NOT_CONNECT &&\n      mode === CONSTANT.ECLIENT_MODE.PEER\n    return { disabled: !isEnable }\n  }, [appStep, mode])\n\n  // Effect\n  connectionMonitor(connection, eventSource, dispatch)\n\n  // Effect - update hostSignal from firebase\n  useEffect(() => {\n    const roomRef = `/room/${roomId}/hostSignal`\n    const hostSignalRef = firebaseDatabase.ref(roomRef)\n\n    const updateHostSignalFromFirebase = value => {\n      console.log('aaaa', value)\n      const { data } = value.val() || {}\n      if (data) {\n        setInputSignalData(data)\n        toast({\n          message: 'host - sync from firebase',\n          type: 'is-info',\n          animate: { in: 'fadeIn', out: 'fadeOut' }\n        })\n      }\n    }\n\n    hostSignalRef.on('value', updateHostSignalFromFirebase)\n    return () => {\n      hostSignalRef.off('value', updateHostSignalFromFirebase)\n    }\n  }, [roomId, firebaseDatabase, setInputSignalData])\n\n  // UI Callback\n  const doConnect = useCallback(() => {\n    console.log('Create peer with', rtcConfig)\n    console.log('begin connect ', inputSignalData)\n    const p = new SimplePeer({\n      initiator: false,\n      stream: mineMedia ? mineMedia : false,\n      ...rtcConfig\n    })\n\n    const signalHandler = data => {\n      const newSignalData = data\n      dispatchAnswerToHost(newSignalData)\n    }\n    p.on('signal', signalHandler)\n\n    try {\n      const arr = JSON.parse(inputSignalData)\n      if (!Array.isArray(arr)) throw new Error('Input signal must be aray')\n\n      arr.forEach(itm => p.signal(itm))\n\n      setSubStep(2)\n      dispatch({\n        type: CONSTANT.EACTION.updateConenction,\n        value: p\n      })\n    } catch (error) {\n      console.error(error)\n    }\n  }, [\n    inputSignalData,\n    dispatchAnswerToHost,\n    setSubStep,\n    dispatch,\n    mineMedia,\n    rtcConfig\n  ])\n\n  const copyAnswerDataClipboard = useCallback(() => {\n    const answerStr = JSON.stringify(answerToHost)\n    copyClipboard(answerStr)\n\n    const roomRef = `/room/${roomId}/answer`\n    firebaseDatabase.ref(roomRef).set({ data: answerStr })\n  }, [answerToHost, firebaseDatabase, roomId])\n\n  const onRtcConfigChange = useCallback(\n    val => {\n      dispatchRtcConfig(val)\n    },\n    [dispatchRtcConfig]\n  )\n\n  return (\n    <fieldset {...stepLock}>\n      <WebRtcConfig onChange={onRtcConfigChange} />\n      <div className=\"field\">\n        <label className=\"label\">SignalData from Host</label>\n        <div className={['control'].join(' ')}>\n          <textarea\n            className={['textarea', 'is-small'].join(' ')}\n            value={inputSignalData}\n            onChange={e => setInputSignalData(e.target.value)}\n          />\n        </div>\n      </div>\n      {subStep === 1 && (\n        <div className=\"field\">\n          <button className=\"button is-primary\" onClick={doConnect}>\n            Connect\n          </button>\n        </div>\n      )}\n      {subStep === 2 && (\n        <div className=\"field\">\n          <label className=\"label\">\n            Answer To Host{' '}\n            <a\n              className=\"button is-rounded is-small\"\n              onClick={copyAnswerDataClipboard}\n            >\n              <i className=\"far fa-clipboard\" />\n            </a>\n          </label>\n          <div className={['control'].join(' ')}>\n            <textarea\n              className={['textarea', 'is-small'].join(' ')}\n              readOnly\n              value={JSON.stringify(answerToHost)}\n            />\n          </div>\n        </div>\n      )}\n    </fieldset>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { useStateValue } from '../AppContext'\n\nconst COLOR_MAP = {\n  connecting: 'is-link',\n  connected: 'is-primary',\n  error: 'is-danger',\n  disconnected: 'is-warning'\n}\n\nexport default ({ defaultIndex = 0, tabs = [] }) => {\n  const [{ eventSource }] = useStateValue()\n  const [status, setStatus] = useState('connecting')\n\n  useEffect(() => {\n    const onChangeStatus = status => setStatus(status)\n    eventSource.on('connect', e => onChangeStatus('connected'))\n    eventSource.on('close', e => onChangeStatus('disconnected'))\n    eventSource.on('error', e => onChangeStatus('error'))\n  }, [eventSource])\n\n  return (\n    <article className={['message', COLOR_MAP[status]].join(' ')}>\n      <div className=\"message-body\">\n        <p className=\"is-capitalized\">{status}</p>\n      </div>\n    </article>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { useStateValue } from '../AppContext'\n\nexport default ({ defaultIndex = 0, tabs = [] }) => {\n  const [{ eventSource, connection }] = useStateValue()\n  const [logs, setLogs] = useState([])\n  const [rtcStats, setRtcStats] = useState([])\n\n  // Refresh connection stats\n  useEffect(() => {\n    if (!connection) return\n    const intervalTicket = setInterval(() => {\n      try {\n        if (!connection) return clearInterval(intervalTicket)\n        connection.getStats((err, stats = []) => {\n          setRtcStats(\n            stats.map(({ type, id, timestamp, ...others }) => ({\n              type,\n              id,\n              timestamp,\n              others\n            }))\n          )\n        })\n      } catch (error) {}\n    }, 1000)\n    return () => clearInterval(intervalTicket)\n  }, [connection])\n\n  // Subcrible events\n  useEffect(() => {\n    const msgLog = msg => () => {\n      setLogs([\n        ...logs,\n        {\n          _time: new Date(),\n          content: msg\n        }\n      ])\n    }\n    const msgLogConnect = msgLog('connected')\n    const msgLogError = msgLog('error')\n    const msgLogClose = msgLog('disconnected')\n\n    const msgSendTextMsg = textMsg => msgLog(`Send -> ${textMsg}`)()\n    const msgLogWithData = msg => msgLog(`Recv -> ${msg}`)()\n\n    eventSource.on('connect', msgLogConnect)\n    eventSource.on('error', msgLogError)\n    eventSource.on('data', msgLogWithData)\n    eventSource.on('close', msgLogClose)\n\n    eventSource.on('action-send-text', msgSendTextMsg)\n\n    return () => {\n      eventSource.off('connect', msgLogConnect)\n      eventSource.off('error', msgLogError)\n      eventSource.off('data', msgLogWithData)\n      eventSource.off('close', msgLogClose)\n    }\n  }, [logs, setLogs, eventSource])\n\n  return (\n    <div className=\"column is-full\">\n      <h3>RTC Status Logs - {rtcStats.length}</h3>\n      <div\n        className=\"container has-background-white-bis is-size-7\"\n        style={{\n          minHeight: '50vh',\n          maxHeight: '50vh',\n          overflowY: 'auto',\n          padding: '5px 10px'\n        }}\n      >\n        {rtcStats.map(({ type, id, timestamp, others }, index) => (\n          <div className=\"content\" key={id}>\n            <p>\n              {index}) Type: <strong>{String(type)}</strong> - Id: {String(id)}\n            </p>\n            <ul>\n              {Object.keys(others).map((key, index) => (\n                <li key={index}>\n                  {String(key)}: {String(others[key])}\n                </li>\n              ))}\n            </ul>\n          </div>\n        ))}\n      </div>\n      <hr />\n      <div\n        className=\"container has-background-grey-lighter is-size-7\"\n        style={{\n          minHeight: '50vh',\n          maxHeight: '50vh',\n          overflowY: 'auto',\n          padding: '5px 10px'\n        }}\n      >\n        {logs.map(({ content, _time }, index) => (\n          <p key={index}>\n            {String(_time)} - {String(content)}\n          </p>\n        ))}\n      </div>\n    </div>\n  )\n}\n","import React, { useEffect, useState, useCallback } from 'react'\nimport { useStateValue } from '../AppContext'\n\nexport default ({ defaultIndex = 0, tabs = [] }) => {\n  const [{ eventSource, connection }] = useStateValue()\n  const [enable, setEnable] = useState(false)\n  const [inputMsg, setInputMsg] = useState([])\n\n  useEffect(() => {\n    const msgLogConnect = () => setEnable(true)\n    const msgLogClose = () => setEnable(false)\n\n    eventSource.on('connect', msgLogConnect)\n    eventSource.on('close', msgLogClose)\n\n    return () => {\n      eventSource.off('connect', msgLogConnect)\n      eventSource.off('close', msgLogClose)\n    }\n  }, [eventSource, setEnable])\n\n  const onMsgChangeCallback = useCallback(val => setInputMsg(val), [\n    setInputMsg\n  ])\n\n  const onSendTextMsg = useCallback(() => {\n    connection.send(inputMsg)\n    eventSource.emit('action-send-text', inputMsg)\n    onMsgChangeCallback('')\n  }, [inputMsg, connection, eventSource, onMsgChangeCallback])\n\n  return (\n    <fieldset disabled={!enable}>\n      <div className=\"columns\">\n        <div className=\"column is-11\">\n          <input\n            className=\"input\"\n            type=\"text\"\n            placeholder=\"message to send\"\n            value={inputMsg}\n            onChange={e => onMsgChangeCallback(e.target.value)}\n            onKeyPress={e => {\n              if (!e) e = window.event\n              var keyCode = e.keyCode || e.which\n              if (String(keyCode) === '13') {\n                onSendTextMsg(e.target.value)\n                return false\n              }\n            }}\n          />\n        </div>\n        <div className=\"column\">\n          <button className=\"button is-info\" onClick={onSendTextMsg}>\n            Send\n          </button>\n        </div>\n      </div>\n    </fieldset>\n  )\n}\n","import React, { useRef, useEffect } from 'react'\nexport default ({ stream }) => {\n  const videoRef = useRef(null)\n  useEffect(() => {\n    if (!videoRef.current || !stream) return\n    const video = videoRef.current\n    if ('srcObject' in video) {\n      video.srcObject = stream\n    } else {\n      video.src = window.URL.createObjectURL(stream) // for older browsers\n    }\n    video.play()\n  }, [stream])\n  return (\n    <>\n      <video ref={videoRef} />\n    </>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { useStateValue } from '../AppContext'\nimport { toast } from 'bulma-toast'\nimport VideoPlayer from './VideoPlayer'\n\nexport default props => {\n  const [{ mineMedia, connection }] = useStateValue()\n  const [otherStream, setOtherStream] = useState(null)\n\n  // Other stream\n  useEffect(() => {\n    if (!connection) return\n    const incomingStream = stream => {\n      toast({\n        message: `video stream recived`,\n        type: 'is-info',\n        animate: { in: 'fadeIn', out: 'fadeOut' }\n      })\n      setOtherStream(stream)\n    }\n    connection.on('stream', incomingStream)\n    return () => {\n      setOtherStream(null)\n      connection.off('stream', incomingStream)\n    }\n  }, [connection, setOtherStream])\n\n  return (\n    <fieldset>\n      <div className=\"columns is-multiline is-centered\">\n        <div className=\"column is-12\">\n          <div className=\"columns is-centered\">\n            <div className=\"column is-6\">\n              <p>Me</p>\n              <VideoPlayer stream={mineMedia} />\n            </div>\n            <div className=\"column is-6\">\n              <p>Other</p>\n              <VideoPlayer stream={otherStream} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </fieldset>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport DetectRTC from 'detectrtc'\nimport Peer from 'simple-peer'\nimport { useStateValue, CONSTANT } from '../AppContext'\n\nexport default ({ expectedMode, children }) => {\n  const [{ supportWebRTC }, dispatch] = useStateValue()\n  const [checking, setChecking] = useState(true)\n\n  useEffect(() => {\n    DetectRTC.load(() => {\n      dispatch({\n        type: CONSTANT.EACTION.updateWebRTCSupport,\n        value: DetectRTC.isWebRTCSupported\n      })\n      setChecking(false)\n    })\n  }, [dispatch])\n\n  return (\n    <React.Fragment>\n      {checking ? null : supportWebRTC && Peer.WEBRTC_SUPPORT ? (\n        children\n      ) : (\n        <article class=\"message is-danger\">\n          <div class=\"message-body\">Browser don't support WebRTC</div>\n        </article>\n      )}\n    </React.Fragment>\n  )\n}\n","import React from 'react'\nimport { useStateValue } from '../AppContext'\n\nexport default ({ expectedMode, children }) => {\n  const [{ mode }] = useStateValue()\n\n  return (\n    <React.Fragment>{expectedMode === mode ? children : null}</React.Fragment>\n  )\n}\n","import React from 'react'\nimport ChoiceMode from './components/ChoiceMode'\nimport WebRtcHost from './components/WebRtcHost'\nimport WebRtcClient from './components/WebRtcClient'\nimport WebRtcStatus from './components/WebRtcStatus'\nimport WebRtcLog from './components/WebRtcLog'\nimport WebRtcData from './components/WebRtcData'\nimport WebRtcVideoCall from './components/WebRtcVideoCall'\nimport WebRTCSupport from './containers/WebRTCSupport'\nimport DisplayIfMode from './containers/DisplayIfMode'\nimport { StateProvider, CONSTANT } from './AppContext'\n\nfunction App() {\n  return (\n    <StateProvider>\n      <section className=\"section \">\n        <div className=\"container\">\n          <section className=\"hero\">\n            <div className=\"hero-body\">\n              <div className=\"container\">\n                <h1 className=\"title\">Web RTC Playground</h1>\n              </div>\n            </div>\n          </section>\n          <WebRTCSupport>\n            <p className=\"has-text-centered is-size-3\">Start here !</p>\n            <div className=\"column\">\n              <div className=\"box\">\n                <ChoiceMode />\n              </div>\n            </div>\n\n            <DisplayIfMode expectedMode={CONSTANT.ECLIENT_MODE.HOST}>\n              <div className=\"column\">\n                <div className=\"box\">\n                  <WebRtcHost />\n                </div>\n              </div>\n            </DisplayIfMode>\n\n            <DisplayIfMode expectedMode={CONSTANT.ECLIENT_MODE.PEER}>\n              <div className=\"column\">\n                <div className=\"box\">\n                  <WebRtcClient />\n                </div>\n              </div>\n            </DisplayIfMode>\n\n            <div className=\"column\">\n              <WebRtcStatus />\n            </div>\n\n            <div className=\"column is-multiline\">\n              <div className=\"box\">\n                <WebRtcLog />\n              </div>\n              <div className=\"box\">\n                <WebRtcData />\n              </div>\n              <div className=\"box\">\n                <WebRtcVideoCall />\n              </div>\n            </div>\n          </WebRTCSupport>\n        </div>\n      </section>\n    </StateProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './vendor/import-bulma'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}