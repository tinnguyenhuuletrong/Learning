{"version":3,"sources":["stores/constant.js","stores/appStore.js","AppContext.js","containers/DisplayIfStep.js","components/ChoiceMode.js","components/WebRtcConfig.js","utils/connectionMonitor.js","components/WebRtcHost.js","components/WebRtcClient.js","components/WebRtcStatus.js","components/WebRtcLog.js","components/WebRtcData.js","containers/WebRTCSupport.js","containers/DisplayIfMode.js","App.js","serviceWorker.js","index.js"],"names":["ESTEP","CHOICE_MODE","NOT_CONNECT","CONNECTED","ECLIENT_MODE","HOST","PEER","EACTION","reset","setAppStep","setRoomId","setAppMode","updateConenction","updateWebRTCSupport","Firebase","initializeApp","apiKey","databaseURL","initialState","supportWebRTC","appStep","roomId","Date","now","mode","connection","eventSource","EventEmitter","firebaseDatabase","database","reducer","state","action","newState","window","store","debugDev","console","log","type","DetectRTC","isWebRTCSupported","value","StateContext","createContext","StateProvider","children","Provider","useReducer","useStateValue","useContext","CONSTANT","ECONSTANT","expectedAppStep","check","Array","isArray","Fragment","includes","defaultIndex","tabs","dispatch","setMode","useCallback","onReset","destroy","updateRoomId","stepLock","disabled","className","onChange","e","target","placeholder","checked","style","margin","DisplayIfStep","onClick","useState","configJson","setConfig","isCorrect","setIsCorrect","useEffect","JSON","parse","join","defaultValue","newVal","error","errorHandler","err","emit","connectHandler","closeHandler","dataHandler","data","on","off","props","subStep","setSubStep","val","hostSignalData","dispatchHostSignalData","hostAnswer","setHostAnswer","rtcConfig","dispatchRtcConfig","useMemo","connectionMonitor","createNew","p","SimplePeer","initiator","roomRef","answerRef","ref","updateAnswerFromFirebase","toast","message","animate","in","out","submitAnswer","arr","Error","forEach","itm","signal","copyHostDataClipboard","hostSignalDataStr","stringify","copy","set","onRtcConfigChange","WebRtcConfig","readOnly","inputSignalData","setInputSignalData","answerToHost","dispatchAnswerToHost","hostSignalRef","updateHostSignalFromFirebase","doConnect","copyAnswerDataClipboard","answerStr","COLOR_MAP","connecting","connected","disconnected","status","setStatus","onChangeStatus","logs","setLogs","rtcStats","setRtcStats","intervalTicket","setInterval","a","getStats","stats","map","id","timestamp","others","clearInterval","msgLog","msg","_time","content","msgLogConnect","msgLogError","msgLogClose","msgLogWithData","textMsg","length","minHeight","maxHeight","overflowY","padding","index","key","String","Object","keys","enable","setEnable","inputMsg","setInputMsg","onMsgChangeCallback","onSendTextMsg","send","onKeyPress","event","keyCode","which","expectedMode","checking","setChecking","load","Peer","WEBRTC_SUPPORT","class","App","WebRTCSupport","ChoiceMode","DisplayIfMode","WebRtcHost","WebRtcClient","WebRtcStatus","WebRtcLog","WebRtcData","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2168483d.chunk.js","sourcesContent":["export const ESTEP = {\n  CHOICE_MODE: 'CHOICE_MODE',\n  NOT_CONNECT: 'NOT_CONNECT',\n  CONNECTED: 'CONNECTED'\n}\nexport const ECLIENT_MODE = {\n  HOST: 'HOST',\n  PEER: 'PEER'\n}\nexport const EACTION = {\n  reset: 'reset',\n  setAppStep: 'setAppStep',\n  setRoomId: 'setRoomId',\n  setAppMode: 'setAppMode',\n  updateConenction: 'updateConenction',\n  updateWebRTCSupport: 'updateWebRTCSupport'\n}\n","import { EventEmitter } from 'events'\nimport DetectRTC from 'detectrtc'\nimport Firebase from 'firebase/app'\nimport 'firebase/database'\n\nimport { ESTEP, EACTION } from './constant'\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyBe719lkdeQBL0McXykgBMUClMUN3UgpUQ',\n  databaseURL: 'https://weeklyhack-ff068.firebaseio.com/'\n}\nFirebase.initializeApp(firebaseConfig)\n\nexport const initialState = {\n  supportWebRTC: false,\n  appStep: ESTEP.CHOICE_MODE,\n  roomId: `room-${Date.now()}`,\n  mode: '',\n  connection: null,\n  eventSource: new EventEmitter(),\n  firebaseDatabase: Firebase.database()\n}\n\nconst mainReducer = (state, action) => {\n  console.log('action', action)\n  switch (action.type) {\n    case EACTION.reset:\n      return {\n        ...initialState,\n        eventSource: new EventEmitter(),\n        supportWebRTC: DetectRTC.isWebRTCSupported\n      }\n    case EACTION.updateWebRTCSupport:\n      return {\n        ...state,\n        supportWebRTC: action.value\n      }\n    case EACTION.setAppMode:\n      return {\n        ...state,\n        mode: action.value\n      }\n    case EACTION.setRoomId:\n      return {\n        ...state,\n        roomId: action.value\n      }\n    case EACTION.setAppStep:\n      return {\n        ...state,\n        appStep: action.value\n      }\n    case EACTION.updateConenction:\n      return {\n        ...state,\n        connection: action.value\n      }\n    default:\n      return state\n  }\n}\n\nconst debugDev = reducer => (state, action) => {\n  const newState = reducer(state, action)\n  window.store = newState\n  return newState\n}\n\nexport const reducer = debugDev(mainReducer)\n","import React, { createContext, useContext, useReducer } from 'react'\nimport { initialState, reducer } from './stores/appStore'\nimport * as ECONSTANT from './stores/constant'\n\nexport const StateContext = createContext()\nexport const StateProvider = ({ children }) => (\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </StateContext.Provider>\n)\nexport const useStateValue = () => useContext(StateContext)\nexport const CONSTANT = ECONSTANT\n","import React from 'react'\nimport { useStateValue } from '../AppContext'\n\nexport default ({ expectedAppStep, children }) => {\n  const [{ appStep }] = useStateValue()\n  const check = Array.isArray(expectedAppStep)\n    ? expectedAppStep\n    : [expectedAppStep]\n  return (\n    <React.Fragment>{check.includes(appStep) ? children : null}</React.Fragment>\n  )\n}\n","import React, { useCallback } from 'react'\nimport DisplayIfStep from '../containers/DisplayIfStep'\nimport { useStateValue, CONSTANT } from '../AppContext'\n\nexport default ({ defaultIndex = 0, tabs = [] }) => {\n  const [{ appStep, mode, roomId, connection }, dispatch] = useStateValue()\n\n  const setMode = useCallback(\n    mode => {\n      dispatch({\n        type: CONSTANT.EACTION.setAppMode,\n        value: mode\n      })\n      dispatch({\n        type: CONSTANT.EACTION.setAppStep,\n        value: CONSTANT.ESTEP.NOT_CONNECT\n      })\n    },\n    [dispatch]\n  )\n\n  const onReset = useCallback(() => {\n    connection && connection.destroy && connection.destroy()\n    dispatch({\n      type: CONSTANT.EACTION.reset\n    })\n  }, [dispatch, connection])\n\n  const updateRoomId = useCallback(\n    roomId => {\n      dispatch({\n        type: CONSTANT.EACTION.setRoomId,\n        value: roomId\n      })\n    },\n    [dispatch]\n  )\n\n  const stepLock =\n    appStep === CONSTANT.ESTEP.CHOICE_MODE\n      ? { disabled: false }\n      : { disabled: true }\n\n  return (\n    <div className=\"columns is-multiline is-centered\">\n      <div className=\"column is-6\">\n        <fieldset {...stepLock}>\n          <input\n            className=\"input is-rounded\"\n            type=\"text\"\n            value={roomId}\n            onChange={e => updateRoomId(e.target.value)}\n            placeholder=\"Room Id\"\n          />\n        </fieldset>\n      </div>\n      <div className=\"column is-full\">\n        <fieldset {...stepLock}>\n          <div className=\"field is-grouped is-grouped-centered\">\n            <label className=\"radio\">\n              <input\n                type=\"radio\"\n                checked={mode === CONSTANT.ECLIENT_MODE.HOST}\n                onChange={e => setMode(CONSTANT.ECLIENT_MODE.HOST)}\n              />\n              <span style={{ margin: 5 }}>Host</span>\n            </label>\n            <label className=\"radio\">\n              <input\n                type=\"radio\"\n                checked={mode === CONSTANT.ECLIENT_MODE.PEER}\n                onChange={e => setMode(CONSTANT.ECLIENT_MODE.PEER)}\n              />\n              <span style={{ margin: 5 }}>Peer</span>\n            </label>\n          </div>\n        </fieldset>\n      </div>\n      <div className=\"column\">\n        <div className=\"field is-grouped is-grouped-centered\">\n          <DisplayIfStep\n            expectedAppStep={[\n              CONSTANT.ESTEP.CONNECTED,\n              CONSTANT.ESTEP.NOT_CONNECT\n            ]}\n          >\n            <button className=\"button is-warning\" onClick={onReset}>\n              Reset\n            </button>\n          </DisplayIfStep>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\n\nexport default ({ onChange }) => {\n  const [configJson, setConfig] = useState(`{\n    \"trickle\": true,\n    \"config\": {\n      \"iceServers\": [ { \"urls\": \"stun:stun.l.google.com:19302\" }, { \"urls\": \"stun:global.stun.twilio.com:3478?transport=udp\" } ]\n    }\n  }`)\n  const [isCorrect, setIsCorrect] = useState(true)\n\n  // Init value\n  useEffect(() => {\n    onChange && onChange(JSON.parse(configJson))\n  }, [])\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\">\n        STUN/TURN config{' '}\n        <span\n          className={[\n            'icon',\n            isCorrect ? 'has-text-success' : 'has-text-danger'\n          ].join(' ')}\n        >\n          <i\n            className={['fas', isCorrect ? 'fa-check' : 'fa-ban'].join(' ')}\n          ></i>\n        </span>\n      </label>\n      <div className={['control'].join(' ')}>\n        <textarea\n          className={['textarea', 'is-small'].join(' ')}\n          defaultValue={configJson}\n          onChange={e => {\n            try {\n              setConfig(e.target.value)\n              const newVal = JSON.parse(e.target.value)\n              onChange && onChange(newVal)\n              setIsCorrect(true)\n            } catch (error) {\n              setIsCorrect(false)\n            }\n          }}\n        />\n      </div>\n    </div>\n  )\n}\n","import { useEffect } from 'react'\nimport { CONSTANT } from '../AppContext'\n\nexport default (connection, eventSource, dispatch) => {\n  useEffect(() => {\n    if (!connection) return\n\n    const errorHandler = err => eventSource.emit('error', err)\n    const connectHandler = () => {\n      eventSource.emit('connect')\n      dispatch({\n        type: CONSTANT.EACTION.setAppStep,\n        value: CONSTANT.ESTEP.CONNECTED\n      })\n    }\n    const closeHandler = () => {\n      eventSource.emit('close')\n      dispatch({\n        type: CONSTANT.EACTION.setAppStep,\n        value: CONSTANT.ESTEP.NOT_CONNECT\n      })\n    }\n    const dataHandler = data => eventSource.emit('data', data)\n\n    connection.on('error', errorHandler)\n    connection.on('connect', connectHandler)\n    connection.on('data', dataHandler)\n    connection.on('close', closeHandler)\n    return () => {\n      connection.off('error', errorHandler)\n      connection.off('connect', connectHandler)\n      connection.off('data', dataHandler)\n      connection.off('close', closeHandler)\n    }\n  }, [connection, eventSource])\n}\n","import React, {\n  useCallback,\n  useMemo,\n  useReducer,\n  useState,\n  useEffect\n} from 'react'\nimport SimplePeer from 'simple-peer'\nimport { toast } from 'bulma-toast'\nimport copy from 'copy-to-clipboard'\n\nimport WebRtcConfig from './WebRtcConfig'\n\nimport { useStateValue, CONSTANT } from '../AppContext'\nimport connectionMonitor from '../utils/connectionMonitor'\n\nconst copyClipboard = data => {\n  copy(data)\n  toast({\n    message: 'copied - sync with firebase',\n    type: 'is-info',\n    animate: { in: 'fadeIn', out: 'fadeOut' }\n  })\n}\n\nexport default props => {\n  const [\n    { appStep, roomId, mode, connection, eventSource, firebaseDatabase },\n    dispatch\n  ] = useStateValue()\n\n  const [subStep, setSubStep] = useState(1)\n  const [hostSignalData, dispatchHostSignalData] = useReducer((state, val) => {\n    return [...state, val]\n  }, [])\n  const [hostAnswer, setHostAnswer] = useState('')\n  const [rtcConfig, dispatchRtcConfig] = useReducer((state, val) => {\n    return {\n      ...state,\n      ...val\n    }\n  }, {})\n\n  // Compute stepLock\n  const stepLock = useMemo(() => {\n    const isEnable =\n      appStep === CONSTANT.ESTEP.NOT_CONNECT &&\n      mode === CONSTANT.ECLIENT_MODE.HOST\n    return { disabled: !isEnable }\n  }, [appStep, mode])\n\n  // Effect\n  connectionMonitor(connection, eventSource, dispatch)\n\n  // UI Callback\n  const createNew = useCallback(() => {\n    console.log('Create peer with', rtcConfig)\n    const p = new SimplePeer({\n      initiator: true,\n      ...rtcConfig\n    })\n\n    const signalHandler = data => {\n      const newSignalData = data\n      dispatchHostSignalData(newSignalData)\n    }\n    p.on('signal', signalHandler)\n\n    setSubStep(2)\n    dispatch({\n      type: CONSTANT.EACTION.updateConenction,\n      value: p\n    })\n  }, [dispatch, rtcConfig])\n\n  // Effect - update answer from firebase\n  useEffect(() => {\n    const roomRef = `/room/${roomId}/answer`\n    const answerRef = firebaseDatabase.ref(roomRef)\n\n    const updateAnswerFromFirebase = value => {\n      const { data } = value.val() || {}\n      if (data) {\n        setHostAnswer(data)\n        toast({\n          message: 'answer - sync from firebase',\n          type: 'is-info',\n          animate: { in: 'fadeIn', out: 'fadeOut' }\n        })\n      }\n    }\n\n    answerRef.on('value', updateAnswerFromFirebase)\n    return () => {\n      answerRef.off('value', updateAnswerFromFirebase)\n    }\n  }, [roomId, firebaseDatabase, setHostAnswer])\n\n  // Submit answer\n  const submitAnswer = useCallback(() => {\n    try {\n      console.log('submit answer', hostAnswer)\n      const arr = JSON.parse(hostAnswer)\n      if (!Array.isArray(arr)) throw new Error('Input signal must be aray')\n\n      arr.forEach(itm => connection.signal(itm))\n    } catch (error) {\n      console.error(error)\n    }\n  }, [hostAnswer, connection])\n\n  // Copy to clipboard\n  const copyHostDataClipboard = useCallback(() => {\n    const hostSignalDataStr = JSON.stringify(hostSignalData)\n    copyClipboard(hostSignalDataStr)\n\n    const roomRef = `/room/${roomId}/hostSignal`\n    firebaseDatabase.ref(roomRef).set({ data: hostSignalDataStr })\n  }, [hostSignalData, roomId, firebaseDatabase])\n\n  const onRtcConfigChange = useCallback(\n    val => {\n      dispatchRtcConfig(val)\n    },\n    [dispatchRtcConfig]\n  )\n\n  return (\n    <fieldset {...stepLock}>\n      <WebRtcConfig onChange={onRtcConfigChange} />\n      <div className=\"field\">\n        <label className=\"label\">\n          Host Signal Data{' '}\n          <a\n            className=\"button is-rounded is-small\"\n            onClick={copyHostDataClipboard}\n          >\n            <i className=\"far fa-clipboard\" />\n          </a>\n        </label>\n        <div\n          className={['control', hostSignalData ? '' : 'is-loading'].join(' ')}\n        >\n          <textarea\n            className={['textarea', 'is-small'].join(' ')}\n            readOnly\n            value={JSON.stringify(hostSignalData)}\n          ></textarea>\n        </div>\n      </div>\n      {subStep === 1 && (\n        <div className=\"field\">\n          <button className=\"button is-primary\" onClick={createNew}>\n            Generate\n          </button>\n        </div>\n      )}\n      {subStep >= 2 && (\n        <React.Fragment>\n          <div className=\"field\">\n            <label className=\"label\">Answer</label>\n            <div className={['control'].join(' ')}>\n              <textarea\n                className={['textarea', 'is-small'].join(' ')}\n                value={hostAnswer}\n                onChange={e => setHostAnswer(e.target.value)}\n              ></textarea>\n            </div>\n          </div>\n          <div className=\"field\">\n            <button className=\"button is-primary\" onClick={submitAnswer}>\n              Connect\n            </button>\n          </div>\n        </React.Fragment>\n      )}\n    </fieldset>\n  )\n}\n","import React, {\n  useCallback,\n  useState,\n  useMemo,\n  useReducer,\n  useEffect\n} from 'react'\nimport SimplePeer from 'simple-peer'\nimport { toast } from 'bulma-toast'\nimport copy from 'copy-to-clipboard'\n\nimport WebRtcConfig from './WebRtcConfig'\n\nimport { useStateValue, CONSTANT } from '../AppContext'\nimport connectionMonitor from '../utils/connectionMonitor'\n\nconst copyClipboard = data => {\n  copy(data)\n  toast({\n    message: 'copied - sync with firebase',\n    type: 'is-info',\n    animate: { in: 'fadeIn', out: 'fadeOut' }\n  })\n}\n\nexport default props => {\n  const [\n    { appStep, mode, roomId, connection, eventSource, firebaseDatabase },\n    dispatch\n  ] = useStateValue()\n\n  const [subStep, setSubStep] = useState(1)\n  const [inputSignalData, setInputSignalData] = useState('')\n  const [answerToHost, dispatchAnswerToHost] = useReducer((state, val) => {\n    return [...state, val]\n  }, [])\n  const [rtcConfig, dispatchRtcConfig] = useReducer((state, val) => {\n    return {\n      ...state,\n      ...val\n    }\n  }, {})\n\n  const stepLock = useMemo(() => {\n    const isEnable =\n      appStep === CONSTANT.ESTEP.NOT_CONNECT &&\n      mode === CONSTANT.ECLIENT_MODE.PEER\n    return { disabled: !isEnable }\n  }, [appStep, mode])\n\n  // Effect\n  connectionMonitor(connection, eventSource, dispatch)\n\n  // Effect - update hostSignal from firebase\n  useEffect(() => {\n    const roomRef = `/room/${roomId}/hostSignal`\n    const hostSignalRef = firebaseDatabase.ref(roomRef)\n\n    const updateHostSignalFromFirebase = value => {\n      console.log('aaaa', value)\n      const { data } = value.val() || {}\n      if (data) {\n        setInputSignalData(data)\n        toast({\n          message: 'host - sync from firebase',\n          type: 'is-info',\n          animate: { in: 'fadeIn', out: 'fadeOut' }\n        })\n      }\n    }\n\n    hostSignalRef.on('value', updateHostSignalFromFirebase)\n    return () => {\n      hostSignalRef.off('value', updateHostSignalFromFirebase)\n    }\n  }, [roomId, firebaseDatabase, setInputSignalData])\n\n  // UI Callback\n  const doConnect = useCallback(() => {\n    console.log('Create peer with', rtcConfig)\n    console.log('begin connect ', inputSignalData)\n    const p = new SimplePeer({\n      initiator: false,\n      ...rtcConfig\n    })\n\n    const signalHandler = data => {\n      const newSignalData = data\n      dispatchAnswerToHost(newSignalData)\n    }\n    p.on('signal', signalHandler)\n\n    try {\n      const arr = JSON.parse(inputSignalData)\n      if (!Array.isArray(arr)) throw new Error('Input signal must be aray')\n\n      arr.forEach(itm => p.signal(itm))\n\n      setSubStep(2)\n      dispatch({\n        type: CONSTANT.EACTION.updateConenction,\n        value: p\n      })\n    } catch (error) {\n      console.error(error)\n    }\n  }, [inputSignalData, dispatchAnswerToHost, setSubStep, dispatch, rtcConfig])\n\n  const copyAnswerDataClipboard = useCallback(() => {\n    const answerStr = JSON.stringify(answerToHost)\n    copyClipboard(answerStr)\n\n    const roomRef = `/room/${roomId}/answer`\n    firebaseDatabase.ref(roomRef).set({ data: answerStr })\n  }, [answerToHost, firebaseDatabase, roomId])\n\n  const onRtcConfigChange = useCallback(\n    val => {\n      dispatchRtcConfig(val)\n    },\n    [dispatchRtcConfig]\n  )\n\n  return (\n    <fieldset {...stepLock}>\n      <WebRtcConfig onChange={onRtcConfigChange} />\n      <div className=\"field\">\n        <label className=\"label\">SignalData from Host</label>\n        <div className={['control'].join(' ')}>\n          <textarea\n            className={['textarea', 'is-small'].join(' ')}\n            value={inputSignalData}\n            onChange={e => setInputSignalData(e.target.value)}\n          />\n        </div>\n      </div>\n      {subStep === 1 && (\n        <div className=\"field\">\n          <button className=\"button is-primary\" onClick={doConnect}>\n            Connect\n          </button>\n        </div>\n      )}\n      {subStep === 2 && (\n        <div className=\"field\">\n          <label className=\"label\">\n            Answer To Host{' '}\n            <a\n              className=\"button is-rounded is-small\"\n              onClick={copyAnswerDataClipboard}\n            >\n              <i className=\"far fa-clipboard\" />\n            </a>\n          </label>\n          <div className={['control'].join(' ')}>\n            <textarea\n              className={['textarea', 'is-small'].join(' ')}\n              readOnly\n              value={JSON.stringify(answerToHost)}\n            />\n          </div>\n        </div>\n      )}\n    </fieldset>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { useStateValue } from '../AppContext'\n\nconst COLOR_MAP = {\n  connecting: 'is-link',\n  connected: 'is-primary',\n  error: 'is-danger',\n  disconnected: 'is-warning'\n}\n\nexport default ({ defaultIndex = 0, tabs = [] }) => {\n  const [{ eventSource }] = useStateValue()\n  const [status, setStatus] = useState('connecting')\n\n  useEffect(() => {\n    const onChangeStatus = status => setStatus(status)\n    eventSource.on('connect', e => onChangeStatus('connected'))\n    eventSource.on('close', e => onChangeStatus('disconnected'))\n    eventSource.on('error', e => onChangeStatus('error'))\n  }, [eventSource])\n\n  return (\n    <article className={['message', COLOR_MAP[status]].join(' ')}>\n      <div className=\"message-body\">\n        <p className=\"is-capitalized\">{status}</p>\n      </div>\n    </article>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { useStateValue } from '../AppContext'\n\nexport default ({ defaultIndex = 0, tabs = [] }) => {\n  const [{ eventSource, connection }] = useStateValue()\n  const [logs, setLogs] = useState([])\n  const [rtcStats, setRtcStats] = useState([])\n\n  // Refresh connection stats\n  useEffect(() => {\n    if (!connection) return\n    const intervalTicket = setInterval(async () => {\n      connection.getStats((err, stats = []) => {\n        setRtcStats(\n          stats.map(({ type, id, timestamp, ...others }) => ({\n            type,\n            id,\n            timestamp,\n            others\n          }))\n        )\n      })\n    }, 1000)\n    return () => clearInterval(intervalTicket)\n  }, [connection])\n\n  // Subcrible events\n  useEffect(() => {\n    const msgLog = msg => () => {\n      setLogs([\n        ...logs,\n        {\n          _time: new Date(),\n          content: msg\n        }\n      ])\n    }\n    const msgLogConnect = msgLog('connected')\n    const msgLogError = msgLog('error')\n    const msgLogClose = msgLog('disconnected')\n\n    const msgSendTextMsg = textMsg => msgLog(`Send -> ${textMsg}`)()\n    const msgLogWithData = msg => msgLog(`Recv -> ${msg}`)()\n\n    eventSource.on('connect', msgLogConnect)\n    eventSource.on('error', msgLogError)\n    eventSource.on('data', msgLogWithData)\n    eventSource.on('close', msgLogClose)\n\n    eventSource.on('action-send-text', msgSendTextMsg)\n\n    return () => {\n      eventSource.off('connect', msgLogConnect)\n      eventSource.off('error', msgLogError)\n      eventSource.off('data', msgLogWithData)\n      eventSource.off('close', msgLogClose)\n    }\n  }, [logs, setLogs, eventSource])\n\n  return (\n    <div className=\"column is-full\">\n      <h3>RTC Status Logs - {rtcStats.length}</h3>\n      <div\n        className=\"container has-background-white-bis is-size-7\"\n        style={{\n          minHeight: '50vh',\n          maxHeight: '50vh',\n          overflowY: 'auto',\n          padding: '5px 10px'\n        }}\n      >\n        {rtcStats.map(({ type, id, timestamp, others }, index) => (\n          <div className=\"content\" key={id}>\n            <p>\n              {index}) Type: <strong>{String(type)}</strong> - Id: {String(id)}\n            </p>\n            <ul>\n              {Object.keys(others).map((key, index) => (\n                <li key={index}>\n                  {String(key)}: {String(others[key])}\n                </li>\n              ))}\n            </ul>\n          </div>\n        ))}\n      </div>\n      <hr />\n      <div\n        className=\"container has-background-grey-lighter is-size-7\"\n        style={{\n          minHeight: '50vh',\n          maxHeight: '50vh',\n          overflowY: 'auto',\n          padding: '5px 10px'\n        }}\n      >\n        {logs.map(({ content, _time }, index) => (\n          <p key={index}>\n            {String(_time)} - {String(content)}\n          </p>\n        ))}\n      </div>\n    </div>\n  )\n}\n","import React, { useEffect, useState, useCallback } from 'react'\nimport { useStateValue, CONSTANT } from '../AppContext'\n\nexport default ({ defaultIndex = 0, tabs = [] }) => {\n  const [{ eventSource, connection }] = useStateValue()\n  const [enable, setEnable] = useState(false)\n  const [inputMsg, setInputMsg] = useState([])\n\n  useEffect(() => {\n    const msgLogConnect = () => setEnable(true)\n    const msgLogClose = () => setEnable(false)\n\n    eventSource.on('connect', msgLogConnect)\n    eventSource.on('close', msgLogClose)\n\n    return () => {\n      eventSource.off('connect', msgLogConnect)\n      eventSource.off('close', msgLogClose)\n    }\n  }, [eventSource, setEnable])\n\n  const onMsgChangeCallback = useCallback(val => setInputMsg(val), [\n    setInputMsg\n  ])\n\n  const onSendTextMsg = useCallback(() => {\n    connection.send(inputMsg)\n    eventSource.emit('action-send-text', inputMsg)\n    onMsgChangeCallback('')\n  }, [inputMsg, connection, eventSource, onMsgChangeCallback])\n\n  return (\n    <fieldset disabled={!enable}>\n      <div className=\"columns\">\n        <div className=\"column is-11\">\n          <input\n            className=\"input\"\n            type=\"text\"\n            placeholder=\"message to send\"\n            value={inputMsg}\n            onChange={e => onMsgChangeCallback(e.target.value)}\n            onKeyPress={e => {\n              if (!e) e = window.event\n              var keyCode = e.keyCode || e.which\n              if (String(keyCode) === '13') {\n                onSendTextMsg(e.target.value)\n                return false\n              }\n            }}\n          />\n        </div>\n        <div className=\"column\">\n          <button className=\"button is-info\" onClick={onSendTextMsg}>\n            Send\n          </button>\n        </div>\n      </div>\n    </fieldset>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport DetectRTC from 'detectrtc'\nimport Peer from 'simple-peer'\nimport { useStateValue, CONSTANT } from '../AppContext'\n\nexport default ({ expectedMode, children }) => {\n  const [{ supportWebRTC }, dispatch] = useStateValue()\n  const [checking, setChecking] = useState(true)\n\n  useEffect(() => {\n    DetectRTC.load(() => {\n      dispatch({\n        type: CONSTANT.EACTION.updateWebRTCSupport,\n        value: DetectRTC.isWebRTCSupported\n      })\n      setChecking(false)\n    })\n  }, [dispatch])\n\n  return (\n    <React.Fragment>\n      {checking ? null : supportWebRTC && Peer.WEBRTC_SUPPORT ? (\n        children\n      ) : (\n        <article class=\"message is-danger\">\n          <div class=\"message-body\">Browser don't support WebRTC</div>\n        </article>\n      )}\n    </React.Fragment>\n  )\n}\n","import React from 'react'\nimport { useStateValue } from '../AppContext'\n\nexport default ({ expectedMode, children }) => {\n  const [{ mode }] = useStateValue()\n\n  return (\n    <React.Fragment>{expectedMode === mode ? children : null}</React.Fragment>\n  )\n}\n","import React from 'react'\nimport ChoiceMode from './components/ChoiceMode'\nimport WebRtcHost from './components/WebRtcHost'\nimport WebRtcClient from './components/WebRtcClient'\nimport WebRtcStatus from './components/WebRtcStatus'\nimport WebRtcLog from './components/WebRtcLog'\nimport WebRtcData from './components/WebRtcData'\nimport WebRTCSupport from './containers/WebRTCSupport'\nimport DisplayIfMode from './containers/DisplayIfMode'\nimport { StateProvider, CONSTANT } from './AppContext'\n\nfunction App() {\n  return (\n    <StateProvider>\n      <section className=\"section \">\n        <div className=\"container\">\n          <section className=\"hero\">\n            <div className=\"hero-body\">\n              <div className=\"container\">\n                <h1 className=\"title\">Web RTC Playground</h1>\n              </div>\n            </div>\n          </section>\n          <WebRTCSupport>\n            <p className=\"has-text-centered is-size-3\">Start here !</p>\n            <div className=\"column\">\n              <div className=\"box\">\n                <ChoiceMode />\n              </div>\n            </div>\n\n            <DisplayIfMode expectedMode={CONSTANT.ECLIENT_MODE.HOST}>\n              <div className=\"column\">\n                <div className=\"box\">\n                  <WebRtcHost />\n                </div>\n              </div>\n            </DisplayIfMode>\n\n            <DisplayIfMode expectedMode={CONSTANT.ECLIENT_MODE.PEER}>\n              <div className=\"column\">\n                <div className=\"box\">\n                  <WebRtcClient />\n                </div>\n              </div>\n            </DisplayIfMode>\n\n            <div className=\"column\">\n              <WebRtcStatus />\n            </div>\n\n            <div className=\"column is-multiline\">\n              <div className=\"box\">\n                <WebRtcLog />\n              </div>\n              <div className=\"box\">\n                <WebRtcData />\n              </div>\n            </div>\n          </WebRTCSupport>\n        </div>\n      </section>\n    </StateProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './vendor/import-bulma'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}