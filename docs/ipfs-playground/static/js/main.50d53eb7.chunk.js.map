{"version":3,"sources":["hooks/use-ipfs-factory.js","hooks/use-ipfs.js","Snackbar.js","App.js","hooks/use-ipfs-peer.js","index.js","ipfs-logo.svg"],"names":["ipfs","useIpfsFactory","_ref","commands","_useState","useState","_useState2","Object","slicedToArray","isIpfsReady","setIpfsReady","_useState3","_useState4","ipfsInitError","setIpfsInitError","_startIpfs","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","console","log","window","enable","sent","time","promiseMeJsIpfs","Ipfs","config","Addresses","Swarm","EXPERIMENTAL","pubsub","timeEnd","Buffer","types","t0","error","stop","apply","this","arguments","useEffect","startIpfs","opts","Promise","resolve","reject","once","err","useIpfs","cmd","res","setRes","callIpfs","ipfsCmd","abrupt","concat","dotProp","get","SnackBar","react_default","createElement","id","prevTicket","showMessage","msg","x","document","getElementById","innerHTML","className","clearTimeout","setTimeout","replace","SubMessageEmitter","EventEmitter","PubSubInsCache","tryParseJson","rawData","JSON","parse","Title","children","IpfsId","props","map","key","App_Title","IpfsPeer","_ref2","peers","length","itm","i","ConnectToPeer","_ref3","connectToAddr","setConnectToAddr","_connectToMultiAddr","_ref4","multiaddr","swarm","connect","then","catch","e","_x","type","placeholder","value","style","width","onChange","target","margin","onClick","Subcrible","_ref5","_ref5$defaultTopic","defaultTopic","subTo","setSubTo","_useState5","_useState6","topics","setTopics","_onMessageCallback","topic","emit","_refreshTopic","_ref6","_callee2","_context2","ls","_subTo","_ref7","_callee3","handler","_context3","subscribe","_x2","_unSubTo","_ref8","_callee4","_context4","unsubscribe","_x3","_","forEach","toString","Publish","_ref9","_ref9$defaultTopicNam","defaultTopicName","_useState7","_useState8","sendTopic","setSendTopic","_useState9","_useState10","sendMessage","setSendMessage","_useState11","_useState12","logList","setLogList","_publishMessage","_ref11","_callee5","_ref10","message","_context5","publish","from","_x4","onMessage","_ref12","rawMsg","data","toConsumableArray","on","off","App","_useIpfsFactory","refreshInterval","undefined","setPeers","ticket","setInterval","peerInfo","addr","clearInterval","useIpfsPeers","href","title","alt","src","logo","height","App_IpfsId","Boolean","App_Subcrible","App_Publish","App_ConnectToPeer","App_IpfsPeer","Snackbar","ReactDOM","render","src_App","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.50d53eb7.chunk.js","sourcesContent":["import Ipfs from 'ipfs'\nimport { useEffect, useState } from 'react'\n\nlet ipfs = null\n\n/*\n * A quick demo using React hooks to create an ipfs instance.\n *\n * Hooks are brand new at the time of writing, and this pattern\n * is intended to show it is possible. I don't know if it is wise.\n *\n * Next steps would be to store the ipfs instance on the context\n * so use-ipfs calls can grab it from there rather than expecting\n * it to be passed in.\n */\nexport default function useIpfsFactory({ commands }) {\n  const [isIpfsReady, setIpfsReady] = useState(!!ipfs)\n  const [ipfsInitError, setIpfsInitError] = useState(null)\n\n  useEffect(() => {\n    // The fn to useEffect should not return anything other than a cleanup fn,\n    // So it cannot be marked async, which causes it to return a promise,\n    // Hence we delegate to a async fn rather than making the param an async fn.\n    startIpfs()\n    return function cleanup() {\n      if (ipfs && ipfs.stop) {\n        console.log('Stopping IPFS')\n        ipfs.stop()\n        setIpfsReady(false)\n      }\n    }\n  }, [])\n\n  async function startIpfs() {\n    if (ipfs) {\n      console.log('IPFS already started')\n    } else if (window.ipfs && window.ipfs.enable) {\n      console.log('Found window.ipfs')\n      ipfs = await window.ipfs.enable({ commands })\n    } else {\n      try {\n        console.time('IPFS Started')\n        ipfs = await promiseMeJsIpfs(Ipfs, {\n          config: {\n            Addresses: {\n              Swarm: [\n                '/dns4/ws-star.discovery.libp2p.io/tcp/443/wss/p2p-websocket-star'\n              ]\n            }\n          },\n          EXPERIMENTAL: {\n            pubsub: true\n          }\n        })\n        console.timeEnd('IPFS Started')\n        window.ipfs = ipfs\n        window.Buffer = ipfs.types.Buffer\n      } catch (error) {\n        console.error('IPFS init error:', error)\n        ipfs = null\n        setIpfsInitError(error)\n      }\n    }\n\n    setIpfsReady(!!ipfs)\n  }\n\n  return { ipfs, isIpfsReady, ipfsInitError }\n}\n\nfunction promiseMeJsIpfs(Ipfs, opts) {\n  return new Promise((resolve, reject) => {\n    const ipfs = new Ipfs(opts)\n    ipfs.once('ready', () => resolve(ipfs))\n    ipfs.once('error', err => reject(err))\n  })\n}\n","import { useState, useEffect } from 'react'\nimport dotProp from 'dot-prop'\n\n/*\n * Pass the command you'd like to call on an ipfs instance.\n *\n * Uses setState to capture the response, so your component\n * will re-render when the result turns up.\n *\n */\nexport default function useIpfs(ipfs, cmd, opts) {\n  const [res, setRes] = useState(null)\n  useEffect(() => {\n    callIpfs(ipfs, cmd, opts, setRes)\n  }, [ipfs, cmd, opts])\n  return res\n}\n\nasync function callIpfs(ipfs, cmd, opts, setRes) {\n  if (!ipfs) return null\n  console.log(`Call ipfs.${cmd}`)\n  const ipfsCmd = dotProp.get(ipfs, cmd)\n  const res = await ipfsCmd(opts)\n  console.log(`Result ipfs.${cmd}`, res)\n  setRes(res)\n}\n","import React from 'react'\nimport './snackbar.css'\n\nconst SnackBar = () => {\n  return <div id=\"snackbar\">Some text some message..</div>\n}\n\nexport default SnackBar\n\nlet prevTicket = null\n\nwindow.showMessage = function(msg) {\n  // Get the snackbar DIV\n  var x = document.getElementById('snackbar')\n\n  x.innerHTML = msg\n\n  // Add the \"show\" class to DIV\n  x.className = 'show'\n\n  if (prevTicket) clearTimeout(prevTicket)\n\n  // After 3 seconds, remove the show class from DIV\n  prevTicket = setTimeout(function() {\n    x.className = x.className.replace('show', '')\n    prevTicket = null\n  }, 3000)\n}\n","import React, { useState, useEffect } from 'react'\nimport useIpfsFactory from './hooks/use-ipfs-factory.js'\nimport useIpfs from './hooks/use-ipfs.js'\nimport useIpfsPeers from './hooks/use-ipfs-peer.js'\nimport logo from './ipfs-logo.svg'\nimport SnackBar from './Snackbar'\nimport { EventEmitter } from 'events'\n\nconst SubMessageEmitter = new EventEmitter()\nconst PubSubInsCache = {}\n\nfunction tryParseJson(rawData) {\n  try {\n    return JSON.parse(rawData)\n  } catch (error) {\n    return null\n  }\n}\n\nconst App = () => {\n  const { ipfs, ipfsInitError } = useIpfsFactory({ commands: ['id'] })\n  const id = useIpfs(ipfs, 'id')\n  const peers = useIpfsPeers(ipfs)\n  return (\n    <div className=\"sans-serif\">\n      <header className=\"flex items-center pa3 bg-navy bb bw3 b--aqua\">\n        <a href=\"https://ipfs.io\" title=\"home\">\n          <img\n            alt=\"IPFS logo\"\n            src={logo}\n            style={{ height: 50 }}\n            className=\"v-top\"\n          />\n        </a>\n        <h1 className=\"flex-auto ma0 tr f3 fw2 montserrat aqua\">IPFS React</h1>\n      </header>\n      <main>\n        {ipfsInitError && (\n          <div className=\"bg-yellow pa4 mw7 center mv4 white\">\n            Error: {ipfsInitError.message || ipfsInitError}\n          </div>\n        )}\n        {id && <IpfsId {...id} />}\n        {Boolean(ipfs) && <Subcrible ipfs={ipfs} />}\n        {Boolean(ipfs) && <Publish ipfs={ipfs} />}\n        {Boolean(ipfs) && <ConnectToPeer ipfs={ipfs} />}\n        {Boolean(peers && peers.length) && <IpfsPeer peers={peers} />}\n      </main>\n      <SnackBar />\n    </div>\n  )\n}\n\nconst Title = ({ children }) => {\n  return <h2 className=\"f5 ma0 pb2 tracked aqua fw4 montserrat\">{children}</h2>\n}\n\nconst IpfsId = props => {\n  if (!props) return null\n  return (\n    <section className=\"bg-snow mw8 center mt5\">\n      <h1 className=\"f3 fw4 ma0 pv3 aqua montserrat tc\">Connected to IPFS</h1>\n      <div className=\"pa4\">\n        {['id', 'agentVersion', 'addresses'].map(key => (\n          <div className=\"mb4\" key={key}>\n            <Title>{key}</Title>\n            <div className=\"bg-white pa2 br2 truncate monospace\">\n              {props[key]}\n            </div>\n          </div>\n        ))}\n      </div>\n    </section>\n  )\n}\n\nconst IpfsPeer = ({ peers }) => {\n  if (!peers) return null\n  return (\n    <section className=\"bg-snow mw8 center mt5\">\n      <h1 className=\"f3 fw4 ma0 pv3 aqua montserrat tc\">\n        Peers ({peers.length})\n      </h1>\n\n      <div className=\"pa3\">\n        {peers.map((itm, i) => (\n          <li className=\"bg-white pa2 br2 truncate monospace\" key={i}>\n            {itm}\n          </li>\n        ))}\n      </div>\n    </section>\n  )\n}\n\nconst ConnectToPeer = ({ ipfs }) => {\n  const [connectToAddr, setConnectToAddr] = useState('')\n\n  const _connectToMultiAddr = async multiaddr => {\n    if (!multiaddr) {\n      return console.error('No multiaddr was inserted.')\n    }\n\n    ipfs.swarm\n      .connect(multiaddr)\n      .then(() => {\n        window.showMessage(`Successfully connected to peer.`)\n      })\n      .catch(e => {\n        console.error(e)\n        window.showMessage('An error occurred when connecting to the peer.')\n      })\n  }\n\n  return (\n    <section className=\"bg-snow mw8 center mt5\">\n      <h1 className=\"f3 fw4 ma0 pv3 aqua montserrat tc\">Connect To</h1>\n\n      <div className=\"pa3\">\n        <Title>Multiaddr</Title>\n        <div className=\"bg-white pa2 br2\">\n          <input\n            id=\"multiaddr-input\"\n            type=\"text\"\n            placeholder=\"Multiaddr\"\n            value={connectToAddr}\n            style={{ width: '100%' }}\n            onChange={e => {\n              setConnectToAddr(e.target.value)\n            }}\n          />\n        </div>\n        <center>\n          <button\n            id=\"peer-btn\"\n            style={{ margin: 10 }}\n            onClick={e => {\n              _connectToMultiAddr(connectToAddr)\n            }}\n          >\n            Connect\n          </button>\n        </center>\n      </div>\n    </section>\n  )\n}\n\nconst Subcrible = ({ ipfs, defaultTopic = ['#general'] }) => {\n  const [subTo, setSubTo] = useState('')\n  const [topics, setTopics] = useState([])\n\n  const _onMessageCallback = topic => msg => {\n    SubMessageEmitter.emit('message', { topic, msg })\n  }\n\n  const _refreshTopic = async () => {\n    ipfs.pubsub\n      .ls()\n      .then(topics => {\n        setTopics(topics)\n      })\n      .catch(e =>\n        window.showMessage('An error occurred when connecting to the peer.')\n      )\n  }\n\n  const _subTo = async subTo => {\n    if (!subTo) {\n      return console.error('No topic.')\n    }\n    if (PubSubInsCache[subTo]) {\n      return console.error('Already subcrible topic')\n    }\n\n    const handler = _onMessageCallback(subTo)\n\n    ipfs.pubsub\n      .subscribe(subTo, handler)\n      .then(() => {\n        window.showMessage(`Successfully`)\n        PubSubInsCache[subTo] = handler\n        _refreshTopic()\n      })\n      .catch(e => {\n        console.error(e)\n        window.showMessage('An error occurred.')\n      })\n  }\n\n  const _unSubTo = async subTo => {\n    if (!subTo) {\n      return console.error('No multiaddr was inserted.')\n    }\n    if (!PubSubInsCache[subTo]) {\n      return console.error('Not yet subcrible to topic')\n    }\n\n    ipfs.pubsub\n      .unsubscribe(subTo, PubSubInsCache[subTo])\n      .then(() => {\n        window.showMessage(`Successfully`)\n        delete PubSubInsCache[subTo]\n        _refreshTopic()\n      })\n      .catch(e => {\n        console.error(e)\n        window.showMessage('An error occurred.')\n      })\n  }\n\n  useEffect(\n    _ => {\n      _refreshTopic()\n      defaultTopic.forEach(topic => _subTo(topic))\n    },\n    [ipfs]\n  )\n\n  return (\n    <section className=\"bg-snow mw8 center mt5\">\n      <h1 className=\"f3 fw4 ma0 pv3 aqua montserrat tc\">Subcrible</h1>\n\n      <div className=\"pa3\">\n        <Title>Topics ({topics.length})</Title>\n\n        {topics.map((itm, i) => (\n          <li className=\"bg-white pa2 br2 truncate monospace\" key={i}>\n            {itm.toString()}\n          </li>\n        ))}\n      </div>\n\n      <div className=\"pa3\">\n        <Title>Add & Remove</Title>\n        <div className=\"bg-white pa2 br2\">\n          <input\n            id=\"multiaddr-input\"\n            type=\"text\"\n            placeholder=\"Topic Name\"\n            value={subTo}\n            style={{ width: '100%' }}\n            onChange={e => {\n              setSubTo(e.target.value)\n            }}\n          />\n        </div>\n        <center>\n          <button\n            style={{ margin: 10 }}\n            onClick={e => {\n              _subTo(subTo)\n            }}\n          >\n            Subcrible\n          </button>\n          <button\n            style={{ margin: 10 }}\n            onClick={e => {\n              _unSubTo(subTo)\n            }}\n          >\n            UnSubcrible\n          </button>\n        </center>\n      </div>\n    </section>\n  )\n}\n\nconst Publish = ({ ipfs, defaultTopicName = '#general' }) => {\n  const [sendTopic, setSendTopic] = useState(defaultTopicName)\n  const [sendMessage, setSendMessage] = useState('')\n  const [logList, setLogList] = useState([])\n\n  const _publishMessage = async ({ topic, message }) => {\n    if (!PubSubInsCache[topic]) {\n      return console.error('Not yet subcrible to topic')\n    }\n\n    ipfs.pubsub\n      .publish(topic, ipfs.types.Buffer.from(message))\n      .then(() => {})\n      .catch(e => {\n        console.error(e)\n        window.showMessage('An error occurred.')\n      })\n  }\n\n  useEffect(\n    _ => {\n      const onMessage = ({ topic, msg }) => {\n        const rawMsg = msg.data.toString()\n        const itm = {\n          topic,\n          rawMsg,\n          msg: tryParseJson(rawMsg)\n        }\n        console.log(topic, ' -> ', msg)\n        setLogList([itm, ...logList])\n      }\n\n      SubMessageEmitter.on('message', onMessage)\n      return e => SubMessageEmitter.off('message', onMessage)\n    },\n    [ipfs, logList]\n  )\n\n  return (\n    <section className=\"bg-snow mw8 center mt5\">\n      <h1 className=\"f3 fw4 ma0 pv3 aqua montserrat tc\">Publish</h1>\n\n      <div className=\"pa3\">\n        <Title>Send To Topic</Title>\n        <div className=\"bg-white pa2 br2\">\n          <input\n            id=\"multiaddr-input\"\n            type=\"text\"\n            placeholder=\"Topic Name\"\n            value={sendTopic}\n            style={{ width: '50%' }}\n            onChange={e => {\n              setSendTopic(e.target.value)\n            }}\n          />\n        </div>\n\n        <Title>With Message</Title>\n        <div className=\"bg-white pa2 br2\">\n          <input\n            id=\"multiaddr-input\"\n            type=\"text\"\n            placeholder=\"Content\"\n            value={sendMessage}\n            style={{ width: '100%' }}\n            onChange={e => {\n              setSendMessage(e.target.value)\n            }}\n          />\n        </div>\n        <center>\n          <button\n            style={{ margin: 10 }}\n            onClick={e => {\n              _publishMessage({ topic: sendTopic, message: sendMessage })\n            }}\n          >\n            Send\n          </button>\n        </center>\n\n        <Title>Received messages ({logList.length})</Title>\n\n        {logList.map((itm, i) => (\n          <li className=\"bg-white pa2 br2 truncate monospace\" key={i}>\n            {`${itm.topic.toString()} - ${itm.rawMsg}`}\n          </li>\n        ))}\n      </div>\n    </section>\n  )\n}\n\nexport default App\n","import { useState, useEffect } from 'react'\n\nexport default function useIpfsPeers(ipfs, refreshInterval = 2000) {\n  const [peers, setPeers] = useState([])\n  useEffect(() => {\n    const ticket = setInterval(async () => {\n      if (!ipfs) return\n      const peerInfo = await ipfs.swarm.peers()\n      setPeers(peerInfo.map(itm => itm.addr.toString()))\n    }, refreshInterval)\n\n    return _ => clearInterval(ticket)\n  }, [ipfs])\n  return peers\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","module.exports = __webpack_public_path__ + \"static/media/ipfs-logo.4831bd1a.svg\";"],"sourceRoot":""}